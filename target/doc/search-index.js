var searchIndex = JSON.parse('{\
"ac_library_rs":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,0,0,2,2,0,2,2,0,0,0,0,2,0,0,0,2,2,2,0,2,2,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,16,3,16,8,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,5,5,5,5,3,3,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,3,3,11,11,11,11,11,12,12,11,11,12,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,3,3,4,3,18,8,4,4,6,6,6,8,8,8,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,3,3,8,3,16,3,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11],"n":["Additive","Barrett","ButterflyCache","DefaultId","Dsu","DynamicModInt","Edge","FenwickTree","Id","LazySegtree","MapMonoid","Max","MfGraph","Min","MinCostFlowGraph","Mod1000000007","Mod998244353","ModInt","ModInt1000000007","ModInt998244353","Modulus","Monoid","Multiplicative","RemEuclidU32","SccGraph","Segtree","StaticModInt","TwoSat","convolution","convolution","convolution_i64","crt","dsu","fenwicktree","floor_sum","inv_mod","lazysegtree","lcp_array","lcp_array_arbitrary","math","maxflow","mincostflow","modint","pow_mod","scc","segtree","string","suffix_array","suffix_array_arbitrary","suffix_array_manual","twosat","z_algorithm","z_algorithm_arbitrary","convolution","convolution_i64","convolution_raw","Dsu","borrow","borrow_mut","from","groups","into","leader","merge","new","same","size","try_from","try_into","type_id","FenwickTree","accum","add","borrow","borrow_mut","from","into","new","sum","try_from","try_into","type_id","F","LazySegtree","M","MapMonoid","all_prod","apply","apply_range","binary_operation","borrow","borrow_mut","composition","default","fmt","from","from","get","identity_element","identity_map","into","mapping","max_right","min_left","new","prod","set","try_from","try_into","type_id","crt","floor_sum","inv_mod","pow_mod","Edge","MfGraph","add_edge","borrow","borrow","borrow_mut","borrow_mut","cap","change_edge","default","edges","eq","flow","flow","flow_with_capacity","fmt","from","from","from","get_edge","into","into","min_cut","new","to","try_from","try_from","try_into","try_into","type_id","type_id","MinCostFlowEdge","MinCostFlowGraph","add_edge","borrow","borrow","borrow_mut","borrow_mut","cap","cost","edges","flow","flow","from","from","from","get_edge","into","into","new","slope","to","try_from","try_from","try_into","try_into","type_id","type_id","Barrett","ButterflyCache","DefaultId","DynamicModInt","HINT_VALUE_IS_PRIME","Id","Mod1000000007","Mod998244353","ModInt","ModInt1000000007","ModInt998244353","ModIntBase","Modulus","RemEuclidU32","StaticModInt","VALUE","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","butterfly_cache","butterfly_cache","butterfly_cache","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","companion_barrett","companion_barrett","default","default","default","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","inv","inv","inv","inv","inv","modulus","modulus","modulus","modulus","modulus","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","product","product","product","product","raw","raw","raw","raw","raw","rem_euclid_u32","set_modulus","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","val","val","val","val","val","SccGraph","add_edge","borrow","borrow_mut","from","into","new","scc","try_from","try_into","type_id","Additive","Max","Min","Monoid","Multiplicative","S","Segtree","all_prod","binary_operation","binary_operation","binary_operation","binary_operation","binary_operation","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","from","from","from","from","from","from","get","identity","identity","identity","identity","identity","into","into","into","into","into","max_right","min_left","new","prod","set","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","lcp_array","lcp_array_arbitrary","suffix_array","suffix_array_arbitrary","suffix_array_manual","z_algorithm","z_algorithm_arbitrary","TwoSat","add_clause","answer","borrow","borrow_mut","from","into","new","satisfiable","try_from","try_into","type_id"],"q":["ac_library_rs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ac_library_rs::convolution","","","ac_library_rs::dsu","","","","","","","","","","","","","","ac_library_rs::fenwicktree","","","","","","","","","","","","ac_library_rs::lazysegtree","","","","","","","","","","","","","","","","","","","","","","","","","","","","ac_library_rs::math","","","","ac_library_rs::maxflow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ac_library_rs::mincostflow","","","","","","","","","","","","","","","","","","","","","","","","","","","ac_library_rs::modintac_library_rs::scc","","","","","","","","","","","ac_library_rs::segtree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ac_library_rs::string","","","","","","","ac_library_rs::twosat","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Disjoint set union (DSU) with union by size and path …","","","","","","","Number-theoretic algorithms.","","","Structs that treat the modular arithmetic.","","","","","","","","A 2-SAT Solver.","","","","","","A Disjoint set union (DSU) with union by size and path …","","","Returns the argument unchanged.","Divides the graph into connected components.","Calls <code>U::from(self)</code>.","Performs the Fɪɴᴅ operation.","Performs the Uɴɪᴏɴ operation.","Creates a new <code>Dsu</code>.","Returns whether the vertices $a$ and $b$ are in the same …","Returns the size of the connected component that contains …","","","","","","performs data[idx] += val;","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Returns data[l] + … + data[r - 1].","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Performs CRT (Chinese Remainder Theorem).","Returns $\\\\sum_{i = 0}^{n - 1} \\\\lfloor \\\\frac{a \\\\times i + …","Returns an integer $y \\\\in [0, m)$ such that $xy \\\\equiv 1 …","Returns $x^n \\\\bmod m$.","","","","","","","","","","","","","<code>s != t</code> must hold, otherwise it panics.","","Parameters","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns (maximum flow, cost)","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Pair of <em>m</em> and <em>ceil(2⁶⁴/m)</em>.","Cache for butterfly operations.","","Represents <em>ℤ/mℤ</em> where <em>m</em> is a dynamic value.","","","Represents <em>1000000007</em>.","Represents <em>998244353</em>.","","","","A trait for <code>StaticModInt</code> and <code>DynamicModInt</code>.","Represents a modulus.","A trait for <code>{StaticModInt, DynamicModInt, ModIntBase}::new</code>.","Represents <em>ℤ/mℤ</em> where <em>m</em> is a constant value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Retruns the multiplicative inverse of <code>self</code>.","Retruns the multiplicative inverse of <code>self</code>.","","Retruns the multiplicative inverse of <code>self</code>.","","Returns the modulus.","Returns the modulus, which is <code>&lt;M as Modulus&gt;::VALUE</code>.","","Returns the modulus.","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Barrett</code>.","Creates a new <code>Self</code>.","Creates a new <code>StaticModInt</code>.","Creates a new <code>DynamicModInt</code>.","","","","Returns <code>self</code> to the power of <code>n</code>.","Returns <code>self</code> to the power of <code>n</code>.","Returns <code>self</code> to the power of <code>n</code>.","","","","","Constructs a <code>Self</code> from a <code>val &lt; Self::modulus()</code> without …","","Constructs a <code>StaticModInt</code> from a <code>val &lt; Self::modulus()</code> …","","Constructs a <code>DynamicModInt</code> from a <code>val &lt; Self::modulus()</code> …","Calculates <code>self</code> <em>mod</em> <code>modulus</code> losslessly.","Sets a modulus.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retruns the representative.","","Retruns the representative.","","Retruns the representative.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 2-SAT Solver.","Adds a clause $(x_i = f) \\\\lor (x_j = g)$.","Returns a truth assignment that satisfies all clauses <strong>of </strong>…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new <code>TwoSat</code> of <code>n</code> variables and 0 clauses.","Returns whether there is a truth assignment that satisfies …","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,0,11,11,11,11,11,11,11,11,11,11,11,12,0,12,0,13,13,13,12,13,13,12,13,13,13,13,13,12,12,13,12,13,13,13,13,13,13,13,13,0,0,0,0,0,0,17,19,17,19,17,19,17,17,17,19,17,19,17,19,19,17,19,17,19,17,17,17,19,19,17,19,17,19,17,0,0,23,24,23,24,23,24,24,23,23,24,24,23,24,23,24,23,23,23,24,24,23,24,23,24,23,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,25,1,1,1,1,1,28,28,28,28,28,1,1,1,28,28,28,45,34,1,30,31,28,32,45,34,1,30,31,28,32,25,30,31,1,30,31,28,32,1,30,31,28,32,30,31,32,27,32,34,1,28,1,1,1,1,1,28,28,28,28,28,1,1,1,28,28,28,1,30,31,28,32,1,1,30,31,28,28,32,45,34,1,1,30,31,28,28,32,1,28,1,30,31,28,32,45,34,1,30,31,28,32,46,1,1,28,28,46,1,1,28,28,1,1,1,1,1,28,28,28,28,28,1,1,1,28,28,28,1,1,28,28,34,46,1,28,30,31,32,46,1,28,1,1,28,28,46,1,1,28,28,26,28,1,1,1,1,1,28,28,28,28,28,1,1,1,28,28,28,1,1,28,28,1,30,31,28,32,1,28,45,34,1,30,31,28,32,45,34,1,30,31,28,32,45,34,1,30,31,28,32,46,1,1,28,28,0,40,40,40,40,40,40,40,40,40,40,0,0,0,0,0,41,0,42,41,47,48,49,50,47,48,49,50,42,47,48,49,50,42,42,47,48,49,50,42,42,42,41,47,48,49,50,47,48,49,50,42,42,42,42,42,42,47,48,49,50,42,47,48,49,50,42,47,48,49,50,42,0,0,0,0,0,0,0,0,44,44,44,44,44,44,44,44,44,44,44],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[[],[[2,[3]]]],[[],2],0,[[]],[[]],[[]],[4,[[2,[[2,[5]]]]]],[[]],[[4,5],5],[[4,5,5],5],[5,4],[[4,5,5],6],[[4,5],5],[[],7],[[],7],[[],8],0,[[[11,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]],5],[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]]]]]],[[[11,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]],5,9]],[[]],[[]],[[]],[[]],[[5,[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]]]]],[[11,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]]]],[[[11,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]],5,5],[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]]]]]],[[],7],[[],7],[[],8],0,0,0,0,[[[13,[12]]]],[[[13,[12]],5]],[[[13,[12]],5,5]],[[]],[[]],[[]],[[]],[[],[[13,[12]]]],[[13,14],[[7,[15]]]],[[]],[2,[[13,[12]]]],[[[13,[12]],5]],[[]],[[]],[[]],[[]],[[[13,[12]],5],5],[[[13,[12]],5],5],[5,[[13,[12]]]],[[[13,[12]],5,5]],[[[13,[12]],5]],[[],7],[[],7],[[],8],[[]],[[3,3,3,3],3],[[3,3],3],[[3,3,16],16],0,0,[[17,5,5],5],[[]],[[]],[[]],[[]],0,[[17,5]],[[],[[17,[18]]]],[17,[[2,[19]]]],[[[19,[[0,[20,0]]]],19],6],[[17,5,5]],0,[[17,5,5]],[[[19,[[0,[21,0]]]],14],22],[[]],[[]],0,[[17,5],19],[[]],[[]],[[17,5],[[2,[6]]]],[5,17],0,[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,[[23,5,5],5],[[]],[[]],[[]],[[]],0,0,[23,[[2,[24]]]],[[23,5,5]],0,[[]],[[]],0,[[23,5],24],[[]],[[]],[5,23],[[23,5,5],2],0,[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],[[1,[25]]]],[[[1,[25]],[1,[25]]],[[1,[25]]]],[[[1,[25]],1],[[1,[25]]]],[[[1,[25]],26],[[1,[25]]]],[[1,[1,[25]]],[[1,[25]]]],[[[28,[27]],28],[[28,[27]]]],[[28,28],[[28,[27]]]],[[28,[28,[27]]],[[28,[27]]]],[[[28,[27]],[28,[27]]],[[28,[27]]]],[[[28,[27]],26],[[28,[27]]]],[[[1,[25]],26]],[[[1,[25]],[1,[25]]]],[[[1,[25]],1]],[[[28,[27]],26]],[[[28,[27]],28]],[[[28,[27]],[28,[27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[[1,[9]]],[[1,[9]]]],[30,30],[31,31],[[[28,[9]]],[[28,[9]]]],[32,32],[[]],[[]],[[]],[[]],[[]],[[30,30],33],[[31,31],33],[[32,32],33],[[],34],[[],34],[[],34],[[],[[1,[25]]]],[[],[[28,[27]]]],[[[1,[25]],[1,[25]]],[[1,[25]]]],[[1,1],[[1,[25]]]],[[[1,[25]],1],[[1,[25]]]],[[[1,[25]],26],[[1,[25]]]],[[1,[1,[25]]],[[1,[25]]]],[[[28,[27]],[28,[27]]],[[28,[27]]]],[[[28,[27]],28],[[28,[27]]]],[[28,[28,[27]]],[[28,[27]]]],[[28,28],[[28,[27]]]],[[[28,[27]],26],[[28,[27]]]],[[[1,[25]],26]],[[[1,[25]],[1,[25]]]],[[[1,[25]],1]],[[[28,[27]],26]],[[[28,[27]],[28,[27]]]],[[[28,[27]],28]],[[[1,[20]],1],6],[[30,30],6],[[31,31],6],[[[28,[20]],28],6],[[32,32],6],[[[1,[25]],14],22],[[[1,[25]],14],22],[[30,14],22],[[31,14],22],[[[28,[27]],14],22],[[[28,[27]],14],22],[[32,14],22],[[]],[[]],[26,[[1,[25]]]],[[]],[[]],[[]],[[]],[26,[[28,[27]]]],[[]],[35,[[7,[[1,[25]],36]]]],[35,[[7,[[28,[27]],36]]]],[[[1,[25]]]],[30],[31],[[[28,[27]]]],[32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[1,[25]]],[[1,[25]]]],[[[1,[25]]],[[1,[25]]]],[[[28,[27]]],[[28,[27]]]],[[[28,[27]]],[[28,[27]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[[1,[25]],[1,[25]]],[[1,[25]]]],[[1,[1,[25]]],[[1,[25]]]],[[1,1],[[1,[25]]]],[[[1,[25]],26],[[1,[25]]]],[[[1,[25]],1],[[1,[25]]]],[[28,28],[[28,[27]]]],[[[28,[27]],28],[[28,[27]]]],[[28,[28,[27]]],[[28,[27]]]],[[[28,[27]],[28,[27]]],[[28,[27]]]],[[[28,[27]],26],[[28,[27]]]],[[[1,[25]],1]],[[[1,[25]],26]],[[[1,[25]],[1,[25]]]],[[[28,[27]],[28,[27]]]],[[[28,[27]],26]],[[[28,[27]],28]],[[[1,[25]]],[[1,[25]]]],[1,[[1,[25]]]],[28,[[28,[27]]]],[[[28,[27]]],[[28,[27]]]],[16,34],[26],[26,[[1,[25]]]],[26,[[28,[27]]]],[[30,30],[[37,[33]]]],[[31,31],[[37,[33]]]],[[32,32],[[37,[33]]]],[38],[[[1,[25]],38],[[1,[25]]]],[[[28,[27]],38],[[28,[27]]]],[[],[[1,[25]]]],[[],[[1,[25]]]],[[],[[28,[27]]]],[[],[[28,[27]]]],[16],[16,[[1,[25]]]],[16,[[1,[25]]]],[16,[[28,[27]]]],[16,[[28,[27]]]],[16,16],[16],[[[1,[25]],1],[[1,[25]]]],[[1,[1,[25]]],[[1,[25]]]],[[[1,[25]],[1,[25]]],[[1,[25]]]],[[[1,[25]],26],[[1,[25]]]],[[1,1],[[1,[25]]]],[[[28,[27]],28],[[28,[27]]]],[[28,[28,[27]]],[[28,[27]]]],[[28,28],[[28,[27]]]],[[[28,[27]],26],[[28,[27]]]],[[[28,[27]],[28,[27]]],[[28,[27]]]],[[[1,[25]],[1,[25]]]],[[[1,[25]],1]],[[[1,[25]],26]],[[[28,[27]],28]],[[[28,[27]],[28,[27]]]],[[[28,[27]],26]],[[],[[1,[25]]]],[[],[[1,[25]]]],[[],[[28,[27]]]],[[],[[28,[27]]]],[[]],[[]],[[]],[[]],[[]],[[],39],[[],39],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],16],[[[1,[25]]],16],[[[1,[25]]],16],[[[28,[27]]],16],[[[28,[27]]],16],0,[[40,5,5]],[[]],[[]],[[]],[[]],[5,40],[40,[[2,[[2,[5]]]]]],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,[[[42,[41]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[42,[41]]]],[[]],[[]],[[]],[[]],[2,[[42,[41]]]],[[]],[[[42,[41]],5]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[42,[41]],5],5],[[[42,[41]],5],5],[5,[[42,[41]]]],[[[42,[41]],5,5]],[[[42,[41]],5]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[35,[[2,[5]]]],[[],[[2,[5]]]],[35,[[2,[5]]]],[[],[[2,[5]]]],[43,[[2,[5]]]],[35,[[2,[5]]]],[[],[[2,[5]]]],0,[[44,5,6,5,6]],[44],[[]],[[]],[[]],[[]],[5,44],[44,6],[[],7],[[],7],[[],8]],"p":[[3,"StaticModInt"],[3,"Vec"],[15,"i64"],[3,"Dsu"],[15,"usize"],[15,"bool"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[8,"AddAssign"],[3,"FenwickTree"],[8,"MapMonoid"],[3,"LazySegtree"],[3,"Formatter"],[3,"Error"],[15,"u32"],[3,"MfGraph"],[8,"Default"],[3,"Edge"],[8,"PartialEq"],[8,"Debug"],[6,"Result"],[3,"MinCostFlowGraph"],[3,"MinCostFlowEdge"],[8,"Modulus"],[8,"RemEuclidU32"],[8,"Id"],[3,"DynamicModInt"],[3,"LocalKey"],[4,"Mod1000000007"],[4,"Mod998244353"],[4,"DefaultId"],[4,"Ordering"],[3,"Barrett"],[15,"str"],[4,"Infallible"],[4,"Option"],[15,"u64"],[3,"String"],[3,"SccGraph"],[8,"Monoid"],[3,"Segtree"],[15,"i32"],[3,"TwoSat"],[3,"ButterflyCache"],[8,"ModIntBase"],[3,"Max"],[3,"Min"],[3,"Additive"],[3,"Multiplicative"]]},\
"rithmic":{"doc":"Ferris the crab playing the bongos","t":[13,13,3,24,8,8,3,2,8,8,3,8,8,3,16,16,3,2,2,4,3,3,6,6,8,8,16,8,8,8,8,13,3,3,3,16,16,16,16,16,3,8,8,2,2,2,2,2,0,23,5,10,10,10,10,10,0,10,10,0,14,14,10,10,10,10,10,10,10,10,10,2,10,10,10,10,0,23,10,10,5,0,2,10,10,23,10,10,0,2,2,2,2,10,0,10,12,10,23,10,14,10,5,23,0,2,2,2,12,10,0,8,3,3,6,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,0,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,8,10,10,10,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,17,17,6,6,17,6,3,17,17,6,6,17,6,17,6,12,0,5,0,0,13,13,3,4,13,13,13,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,17,17,6,2,6,17,6,3,17,2,17,6,6,17,6,17,6,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,6,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,8,3,11,11,11,11,14,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,13,13,3,8,8,3,2,8,8,3,8,8,3,16,16,3,2,2,4,3,3,6,6,8,8,16,8,8,8,8,13,3,3,3,16,16,16,16,16,3,8,8,2,2,2,2,2,11,11,5,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,14,14,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,11,10,11,10,11,11,2,11,11,11,11,11,11,10,10,10,10,11,11,10,10,5,2,10,11,11,11,11,11,11,11,11,10,11,10,10,11,11,2,2,2,2,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,10,11,11,11,11,11,11,11,11,11,11,10,10,11,5,11,11,11,11,11,11,11,2,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,5,5,5,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Add","Answer","BVec","CmpByKey","CountInversions","Divisors","FactorialTable","Gameboard","GetSub","IndexCompress","IndexCompressed","Insort","IntBitOps","Ipc","Item","Item","List","MeldHeap","MeldMinHeap","MoStep","NdFenwick","NdVec","OdometerBE","OdometerLE","OptionMerge","OrdPair","Output","PairMut","PrefixSums","PrintMethods","Rangelike","Remove","SegTree","SortedList","SparseTable","T","T","T","T","T","UnionFind","UnwrapAny","Vector2DMore","XorBasis128","XorBasis16","XorBasis32","XorBasis64","XorBasis8","aug_treap","autofill","binary_search","bit_length","bit_width","canonical","clamp","divisors","gameboard","get_sub","get_sub_mut","graph","imax","imin","index_compress","insort","iter_add_one","iter_gosper","iter_gosper_subsets","iter_lsb","iter_msb","iter_ones","iter_subsets","lagrange_interpolation","length2","lsb","mask","masked","meld_heap","memoize","merge","merge_or","mo_algorithm","monoid_ds","monoid_ops","msb","o_cross","opaque","ordered","pair_mut","polynomial","polynomial_add","polynomial_div","polynomial_div_exact","polynomial_mul","prefix_sums","prelude","rotate_scale","rx","same_dir","semitransparent","sort_count_inversions","struct_input","suffix_sums","ternary_search","transparent","triangular_n","triangular_n","triangular_slice","triangular_steps","tx","unwrap_any","xor_basis","AugFn","AugTreap","Node","OptNode","Range","aug","aug_fn","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contains","default","f","finger","finger_first_false","finger_last_true","from","from","from","from_iter","insert","into","into","into","into_iter","is_empty","iter","join","join3","key","left","left_aug","left_key","left_value","multiunzip","new","new","next","next_back","order_treap","range","remove","remove_all","remove_range","right","right_aug","right_key","right_value","root","split3_by","split3_by_key","split3_by_range","split_by","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","vzip","vzip","vzip","Finger","predecessor","successor","tip","List","OrderAugFn","OrderTreap","Range","SortedList","aug_fn","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contains","contains","count","count","default","default","default","f","from","from","from","from","from","from_iter","from_iter","from_iter","get_at","index","index","insert","insert","insert","insert_left","insert_left","insert_slice","into","into","into","into","into","into_iter","is_empty","is_empty","is_empty","iter","iter","iter","len","len","len","multiunzip","new","new","new","next","next_back","position","position","push_back","push_front","range","range","range_len","range_len","remove","remove","remove","remove_all","remove_all","remove_at","remove_at","remove_range","remove_range","replace","replace_slice","size_hint","split3_at","split_at","to_owned","to_owned","trisect","trisect","trisect_range","trisect_range","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Gameboard","bishop_moves","block","blocked","borrow","borrow_mut","clone","clone_into","diag_jump","dir_jump","dpad4","dpad8","eq","fmt","from","from_vec_vec","h","hash","inbounds","into","is_blocked","knight_jumps","manhat_jumps","new","queen_moves","rook_moves","to_owned","try_from","try_into","type_id","unblock","vzip","w","ACYCLIC","CONNECTED","Dag","DirGraph","FOREST","Forest","Graph","NONE","SIMPLE","SimpDirGraph","SimpUndirGraph","TREE","Tree","UNDIRECTED","UndirGraph","adj","dfs","path_from_pred","prelude","rooted_subtree_fn","BackEdge","CrossEdge","DfsStep","DfsStepKind","ForwardEdge","TreeNodeFinish","TreeNodeStart","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","depth","edge","eq","fmt","fmt","from","from","hash","into","into","kind","p","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","u","vzip","vzip","ACYCLIC","CONNECTED","Dag","DfsStep","DirGraph","FOREST","Forest","Graph","NONE","RsfStep","SIMPLE","SimpDirGraph","SimpUndirGraph","TREE","Tree","UNDIRECTED","UndirGraph","add_edge","adj","bfs_path","borrow","borrow_mut","clone","clone_into","dfs","dfs_up_tree","dfs_up_tree","dijkstra","dijkstra_01","euler_tour","euler_tour","euler_tour_edges","euler_tour_edges","floyd_warshall","fmt","from","from_iter","from_iter_unweighted","into","lca","lca","line","line","new","path_from_pred","rev","rooted_subtree_fn","rooted_subtree_fn","rooted_subtree_fn_half","rooted_subtree_fn_half","size","star","star","subtree_sizes","subtree_sizes","subtree_sizes_rel_to","subtree_sizes_rel_to","tarjan_scc","to_owned","try_from","try_into","type_id","vzip","Leaf","Parent","RsfStep","Sibling","borrow","borrow_mut","from","into","try_from","try_into","type_id","vzip","edge","edge","p","p","p","pp","r","r0","r1","u","MeldHeap","MeldHeapWithDir","MeldMaxHeap","MeldMinHeap","borrow","borrow_mut","clone","clone_into","default","from","from_iter","into","is_empty","len","meld","new","peek","pop","push","to_owned","try_from","try_into","type_id","vzip","NdFenwick","SegTree","borrow","borrow","borrow_mut","borrow_mut","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","from","from_iter","into","into","len","monoid_ops","new","new","prefix","query","query","set","shape","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","vzip","vzip","INVERTIBLE","LAZY","MonoidOps","USumQSum","borrow","borrow_mut","from","into","monoid_ops","operator","operator","operator_identity","operator_inverse","operator_inverse","try_from","try_into","type_id","update","update","update_composition","update_composition","update_distributive","update_distributive","update_identity","vzip","lagrange_interpolation","polynomial_add","polynomial_div","polynomial_div_exact","polynomial_mul","Add","Answer","BVec","CountInversions","Divisors","FactorialTable","Gameboard","GetSub","IndexCompress","IndexCompressed","Insort","IntBitOps","Ipc","Item","Item","List","MeldHeap","MeldMinHeap","MoStep","NdFenwick","NdVec","OdometerBE","OdometerLE","OptionMerge","OrdPair","Output","PairMut","PrefixSums","PrintMethods","Rangelike","Remove","SegTree","SortedList","SparseTable","T","T","T","T","T","UnionFind","UnwrapAny","Vector2DMore","XorBasis128","XorBasis16","XorBasis32","XorBasis64","XorBasis8","all","any","binary_search","bit_length","bit_width","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonical","clamp","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","comb","comb_with_rep","components","compress","count_ones","count_zeros","decompress","default","default","deref","divisors","drop","eprint","eprint","eprint","eprintln","eprintln","eprintln","eq","eq","eye","f","f_inv","fill","fill","fill_with","find","first","first","first_one","first_zero","flip","fmt","fmt","fmt","fmt","fmt","format","format","format","from","from","from","from","from","from","from","from","from","from_indexes","from_iter_iter","from_raw","full","get","get","get_mut","get_sub","get_sub_mut","hash","hash","imax","imin","index","index","index","index","index_compress","index_mut","index_mut","input","input_line","insort","into","into","into","into","into","into","into","into","iter","iter_add_one","iter_gosper","iter_gosper_subsets","iter_lsb","iter_msb","iter_mut","iter_ones","iter_ones","iter_subsets","iter_usize","iter_zeros","lagrange_interpolation","last","last","last_one","last_zero","len","len","length2","lsb","mask","masked","mat_mul","mat_vec_mul","merge","merge_or","mo_algorithm","monoid_ops","msb","multinomial","new","new","new","new","new","not","not","o_cross","ones","ordered","pair_mut","perm","perm_with_rep","polynomial_add","polynomial_div","polynomial_div_exact","polynomial_mul","pow","prefix_sums","prefix_sums","print","print","print","println","println","println","query","raw_vec","replace","resize","roots","rotate_scale","rx","same","same_dir","set","shape","shl","shl","shl_assign","shr","shr","shr_assign","size","size","sort_count_inversions","suffix_sums","suffix_sums","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transposed","triangular_n","triangular_n","triangular_slice","triangular_steps","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unique_count","unwrap_any","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zeros","triangular_n","triangular_slice","triangular_steps","XorBasis128","XorBasis16","XorBasis32","XorBasis64","XorBasis8","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","contains","contains","contains","contains","contains","default","default","default","default","default","from","from","from","from","from","insert","insert","insert","insert","insert","into","into","into","into","into","new","new","new","new","new","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip"],"q":["rithmic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::aug_treap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::aug_treap::finger","","","","rithmic::aug_treap::order_treap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::gameboard","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::graph","","","","","","","","","","","","","","","","","","","","rithmic::graph::dfs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::graph::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::graph::rooted_subtree_fn","","","","","","","","","","","","rithmic::graph::rooted_subtree_fn::RsfStep","","","","","","","","","","rithmic::meld_heap","","","","","","","","","","","","","","","","","","","","","","","","rithmic::monoid_ds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::monoid_ds::monoid_ops","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::polynomial","","","","","rithmic::preluderithmic::triangular_n","","","rithmic::xor_basis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","A compact boolean (bitset) vector with efficient <code>&lt;&lt;</code> <code>&gt;&gt;</code> …","Derive <code>PartialEq</code>, <code>Eq</code>, <code>PartialOrd</code> and <code>Ord</code> for a struct, but …","","Add a <code>divisors</code> method to <code>::primal::Sieve</code>","","","<code>get_sub</code><code>(index, subtract)</code> indexes position …","Index compress a sequence of length <em>n</em> by mapping every …","This <code>struct</code> is created by <code>IndexCompress::index_compress()</code>. …","","This trait provides methods for working with unsigned …","Inter-process communication via pipes with a spawned child …","","","","","","This <code>enum</code> is created by <code>mo_algorithm()</code>. See its …","","","An <code>Iterator</code> over a mixed-radix numbers","An <code>Iterator</code> over a mixed-radix numbers","","Order a pair (2-<code>tuple</code> or 2-<code>array</code>)","","Mutably borrow two indexes of a <code>slice</code> simultaneously.","Calculate prefix or suffix sums","Enable functional-style printing","This trait is intended to allow function APIs to …","","","","","","","","","","A union-find data structure","Unwrap a <code>Result&lt;T, T&gt;</code>, ignoring the <code>Ok</code>/<code>Err</code> status","","","","","","","","Create a wrapper macro with the same name as a given …","Binary search <code>domain</code> for the first point at which <code>predicate</code>…","Returns the minimum number of bits needed to represent …","Returns the size in bits of this integer’s type","Convert to <code>(start_included, end_excluded)</code> where each side …","Convert to <code>(start_included, end_excluded)</code> and check the …","Find all divisors of <code>n</code>","","","","","Incremental maximization","Incremental minimization","","","Let <em>k</em> be the number of bits set in this integer; then …","“Gosper’s Hack” - Iterate over every integer with …","“Gosper’s Hack” but restricted to subsets of this …","Iterates over each set bit of this integer, isolated, from …","Iterates over each set bit of this integer, isolated, from …","Iterates over the index of each set bit of this integer","Iterates over every subset of the set bits of this integer","","","Returns the least-significant-bit of this integer, isolated","Returns an integer with the lowest <code>len</code> bits set","Returns <code>self &amp; mask(len)</code>","","Memoize a function based on some or all of its arguments","Merges two <code>Option</code>s by the following logic:","Merges an <code>Option::Some</code> with a 2nd value, or if <code>None</code> simply …","Mo’s Algorithm","","","Returns the most-significant-bit of this integer, isolated","","See <code>transparent</code>","","","","","","","","","","","","","See <code>transparent</code>","","Given a <code>::proconio</code> input specification and a <code>Name</code>, define:","","Ternary search for the maximum point of a function <code>f()</code> in …","Change the hygiene of a declarative macro","","","","","","","Given a set of binary integers, determine if some other …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Gameboard</code> <code>struct</code> represents a rectangular grid of …","Of the squares reachable by “bishop’s move” from …","Set a block at <code>[i, j]</code>. No effect if already blocked","","","","","","Move <code>dist</code> squares in a 45° diagonal line. Blocks along …","Move <code>dist</code> squares in a straight line. Blocks along the way …","Of the four squares orthogonally adjacent to <code>[i, j]</code>, …","Of the eight squares surrounding <code>[i, j]</code> (orthogonally and …","","","Returns the argument unchanged.","Create a new <code>Gameboard</code> from a <code>Vec&lt;Vec&lt;T&gt;&gt;</code>. Any …","","","Check if <code>[i, j]</code> is within the board dimensions. Blocks are …","Calls <code>U::from(self)</code>.","Check if there is currently a block at <code>[i, j]</code>","Of the squares reachable by “knight’s move” from …","Of the squares that are <code>dist</code> Manhattan distance away from …","Create a new <code>Gameboard</code> with <code>h</code> rows and <code>w</code> columns. No …","Of the squares reachable by “queen’s move” from …","Of the squares reachable by “rook’s move” from <code>[i, j]</code>…","","","","","Remove any block at <code>[i, j]</code>. No effect is there is no block …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(Tree) Filter a DFS of the tree to only the <em>n</em> - 1 “upward…","(Tree) Filter a DFS of the tree to only the <em>n</em> - 1 “upward…","","","(Tree) List node visits in a DFS starting at <code>s</code>","(Tree) List node visits in a DFS starting at <code>s</code>","(Tree) List edges traversed in a DFS starting at <code>s</code>","(Tree) List edges traversed in a DFS starting at <code>s</code>","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","<em>O</em>(<em>n</em>)-step calculation of function <code>f()</code> for:","<em>O</em>(<em>n</em>)-step calculation of function <code>f()</code> for:","Run <code>rooted_subtree_fn</code> but stop after the first upward DFS …","Run <code>rooted_subtree_fn</code> but stop after the first upward DFS …","","","","(Tree) Determine the size of all 2(<em>n</em> - 1) possible …","(Tree) Determine the size of all 2(<em>n</em> - 1) possible …","(Tree) Relative to <code>root</code>, determine the number of nodes …","(Tree) Relative to <code>root</code>, determine the number of nodes …","","","","","","","","","See <code>rooted_subtree_fn</code>","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","A priority queue","","Same as <code>MeldHeap</code>","<code>MeldHeap</code> but in reverse order, popping the minimum element","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Combine two heaps. See <code>MeldHeap</code> for an example","","Return but do not remove the maximum item in the heap","Remove and return the maximum item in the heap. See …","Add an item to the heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Construct from any type that can be iterated over and has …","Construct from an iterator of unknown size. If the size is …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","<em>O(n²)</em>","<em>O(n)</em>","<em>O(n²)</em>","","Note: This runs in <em>O(n²)</em>, so DFT convolution in <em>O(n log n)</em>…","","","A compact boolean (bitset) vector with efficient <code>&lt;&lt;</code> <code>&gt;&gt;</code> …","","Add a <code>divisors</code> method to <code>::primal::Sieve</code>","","","<code>get_sub</code><code>(index, subtract)</code> indexes position …","Index compress a sequence of length <em>n</em> by mapping every …","This <code>struct</code> is created by <code>IndexCompress::index_compress()</code>. …","","This trait provides methods for working with unsigned …","Inter-process communication via pipes with a spawned child …","","","","","","This <code>enum</code> is created by <code>mo_algorithm()</code>. See its …","","","An <code>Iterator</code> over a mixed-radix numbers","An <code>Iterator</code> over a mixed-radix numbers","","Order a pair (2-<code>tuple</code> or 2-<code>array</code>)","","Mutably borrow two indexes of a <code>slice</code> simultaneously.","Calculate prefix or suffix sums","Enable functional-style printing","This trait is intended to allow function APIs to …","","","","","","","","","","A union-find data structure","Unwrap a <code>Result&lt;T, T&gt;</code>, ignoring the <code>Ok</code>/<code>Err</code> status","","","","","","","","","Binary search <code>domain</code> for the first point at which <code>predicate</code>…","Returns the minimum number of bits needed to represent …","Returns the size in bits of this integer’s type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert to <code>(start_included, end_excluded)</code> where each side …","Convert to <code>(start_included, end_excluded)</code> and check the …","","","","","","","","","","","","","Return the current components. See <code>UnionFind</code> for an example","","","","","","","","Find all divisors of <code>n</code>","","","","","","","","","","","","","","","","Find the representative for <code>x</code>’s component","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Create a new <code>UnionFind</code> from component lists. Roughly the …","","","","","","","","","","Incremental maximization","Incremental minimization","","","","","","","","Read from child process until EOF (blocking), then create …","Wait for the next line from the child process, then create …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Let <em>k</em> be the number of bits set in this integer; then …","“Gosper’s Hack” - Iterate over every integer with …","“Gosper’s Hack” but restricted to subsets of this …","Iterates over each set bit of this integer, isolated, from …","Iterates over each set bit of this integer, isolated, from …","","Iterates over the index of each set bit of this integer","","Iterates over every subset of the set bits of this integer","","","","","","","","","","","Returns the least-significant-bit of this integer, isolated","Returns an integer with the lowest <code>len</code> bits set","Returns <code>self &amp; mask(len)</code>","","","Merges two <code>Option</code>s by the following logic:","Merges an <code>Option::Some</code> with a 2nd value, or if <code>None</code> simply …","Mo’s Algorithm","","Returns the most-significant-bit of this integer, isolated","","Spawn a child process and set up piped I/O to it. See <code>Ipc</code> …","","","","Construct a new <code>UnionFind</code> with <code>n</code> initially disconnected …","","","","","","","","","","","","","","","See <code>PrefixSums</code> for more information","","","","","","","","","","","Return the current component representatives","","","Return <code>true</code> if <code>x</code> and <code>y</code> are in the same component","","","","","","","","","","","Return the size of <code>x</code>’s component","","","See <code>PrefixSums</code> for more information","Ternary search for the maximum point of a function <code>f()</code> in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Connect the components of <code>x</code> and <code>y</code>. Returns <code>true</code> if they …","","","","","","","","","","","","Return the <em>n</em>th triangular number, i.e the sum of <code>1..=n</code>, in …","Return the sum of the integers in <code>range</code>, in <em>O</em>(1)","Return the sum of the integers in <code>range</code>, stepping by <code>step</code>, …","See <code>module-level documentation</code> for more information","See <code>module-level documentation</code> for more information","See <code>module-level documentation</code> for more information","See <code>module-level documentation</code> for more information","See <code>module-level documentation</code> for more information","","","","","","","","","","","Return <code>true</code> if <code>u</code> is <strong>not</strong> independent of the basis","Return <code>true</code> if <code>u</code> is <strong>not</strong> independent of the basis","Return <code>true</code> if <code>u</code> is <strong>not</strong> independent of the basis","Return <code>true</code> if <code>u</code> is <strong>not</strong> independent of the basis","Return <code>true</code> if <code>u</code> is <strong>not</strong> independent of the basis","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If <code>u</code> is independent of the basis, add it and return <code>true</code>","If <code>u</code> is independent of the basis, add it and return <code>true</code>","If <code>u</code> is independent of the basis, add it and return <code>true</code>","If <code>u</code> is independent of the basis, add it and return <code>true</code>","If <code>u</code> is independent of the basis, add it and return <code>true</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[67,67,0,0,0,0,0,0,0,0,0,0,0,0,68,69,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,67,0,0,0,71,72,73,74,75,0,0,0,0,0,0,0,0,0,0,0,76,76,29,29,77,0,69,69,0,0,0,72,73,76,76,76,76,76,76,76,0,71,76,76,76,0,0,74,74,0,0,0,76,71,0,78,68,0,0,0,0,0,70,0,71,52,71,0,79,0,70,0,0,0,0,0,0,52,75,0,0,0,0,0,0,14,13,16,14,13,16,14,13,14,13,14,13,13,13,80,0,14,14,16,14,13,13,13,16,14,13,16,13,13,13,13,14,14,14,14,14,16,14,13,16,16,0,13,13,13,13,14,14,14,14,13,13,13,13,13,14,13,16,14,13,16,14,13,16,14,13,14,16,14,13,0,81,81,81,0,0,0,0,0,21,24,23,28,22,21,24,23,28,22,21,22,21,22,21,23,21,23,21,24,23,21,22,24,23,28,22,21,24,23,21,21,24,23,24,23,21,23,21,24,24,23,28,22,21,28,24,23,21,24,23,21,24,23,21,28,24,23,21,28,28,23,21,24,24,23,21,23,21,24,23,21,23,21,23,21,23,21,24,24,28,21,21,22,21,23,21,23,21,24,23,28,22,21,24,23,28,22,21,24,23,28,22,21,24,23,28,22,21,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,37,37,0,0,37,37,37,36,37,36,37,36,37,36,37,36,36,37,36,37,36,37,37,36,37,36,36,36,37,36,37,36,37,36,37,36,36,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,39,39,39,39,39,39,39,40,39,39,39,40,39,40,39,39,39,39,39,39,39,40,39,40,39,39,0,39,40,39,40,39,39,40,39,40,39,40,39,39,39,39,39,39,39,82,82,0,82,82,82,82,82,82,82,82,82,83,84,83,85,84,84,84,85,85,83,0,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,44,47,44,47,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,47,44,47,47,44,47,44,47,47,47,44,47,47,0,44,47,44,44,47,47,44,44,44,47,44,47,44,47,44,47,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,47,44,47,46,46,0,0,86,86,86,86,0,46,86,46,46,86,86,86,86,46,86,46,86,46,86,46,86,0,0,0,0,0,67,67,0,0,0,0,0,0,0,0,0,0,0,68,69,0,0,0,0,0,0,0,0,0,0,70,0,0,0,0,67,0,0,0,71,72,73,74,75,0,0,0,0,0,0,0,0,48,48,0,76,76,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,52,67,51,48,9,41,49,50,52,67,51,48,9,41,49,50,29,29,48,9,41,49,50,48,9,41,49,50,51,51,50,9,48,48,9,48,9,9,77,52,87,87,87,87,87,87,48,41,41,51,51,48,41,41,50,48,41,48,48,48,48,9,41,41,50,87,87,87,52,67,51,48,9,41,49,49,50,48,50,41,41,48,41,41,69,69,48,41,0,0,51,48,41,41,72,41,41,52,52,73,52,67,51,48,9,41,49,50,41,76,76,76,76,76,41,76,48,76,48,48,0,48,41,48,48,48,49,71,76,76,76,41,41,74,74,0,0,76,51,52,51,48,41,50,48,48,71,48,78,68,51,51,0,0,0,0,41,70,41,87,87,87,87,87,87,49,48,48,48,50,71,52,50,71,48,41,48,48,48,48,48,48,41,50,79,70,41,0,48,9,41,49,50,41,41,0,0,0,0,52,67,51,48,9,41,49,50,52,67,51,48,9,41,49,50,52,52,67,51,48,9,41,49,50,50,9,75,52,67,51,48,9,41,49,50,48,0,0,0,0,0,0,0,0,59,60,62,63,65,59,60,62,63,65,59,60,62,63,65,59,60,62,63,65,59,60,62,63,65,59,60,62,63,65,59,60,62,63,65,59,60,62,63,65,59,60,62,63,65,59,60,62,63,65,59,60,62,63,65,59,60,62,63,65],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3],4],[[],5],[[],5],[[]],[6,4],[7,[[8,[7]]]],0,[[7,7],4],[[7,7],4],0,0,0,[[],9],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[5],[5],0,0,[[]],[[]],[[7,10],11],0,0,[[]],[[]],0,[[]],[[7,7]],0,0,0,0,0,[[]],0,[[]],0,[[],2],0,[[],7],0,[[]],[[[6,[12]]],12],0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,[[13,14]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[15,15,15]]],[[14,[15,15,15]]]],[[[13,[15,15,15,15]]],[[13,[15,15,15,15]]]],[[]],[[]],[13,2],[[],13],[14],0,[[14,3,8],2],[[14,3,8],2],[[]],[[]],[[]],[10,13],[13],[[]],[[]],[[]],[[]],[13,2],[13,16],[[13,17,17],17],[[13,17,17,17],17],0,0,[14,4],[14,4],[14,4],[[]],[[],14],[[],13],[16,4],[16,4],0,[[13,1],16],[13,4],[13,2],[[13,1],2],0,[14,4],[14,4],[14,4],0,[[13,17]],[[13,17]],[[13,17,1]],[[13,17]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],0,[[]],[[]],[[]],0,[[]],[[]],[[],14],0,0,0,0,0,[[[21,[20]],14],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[22,[15,15]]],[[22,[15,15]]]],[[[21,[15,15]]],[[21,[15,15]]]],[[]],[[]],[[[23,[20]]],2],[[[21,[20]]],2],[[[23,[20]]],7],[[[21,[20]]],7],[[],[[24,[20]]]],[[],[[23,[20]]]],[[],[[21,[20]]]],[14,7],[[]],[[]],[[]],[[]],[[]],[10,[[24,[20]]]],[10,[[23,[20]]]],[10,[[21,[20]]]],[[[21,[20]],7]],[[[24,[20]],7]],[[[23,[20]],7]],[[[24,[20]],7,20]],[[[23,[20]],20],7],[[[21,[20]],20],7],[[[23,[20]],20],7],[[[21,[20]],20],7],[[[24,[20]],7,10]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[20]]],2],[[[23,[20]]],2],[[[21,[20]]],2],[[[24,[20]]],[[0,[11,25,26,27]]]],[[[23,[20]]],[[0,[11,25,26,27]]]],[[[21,[20]]],[[28,[20]]]],[[[24,[20]]],7],[[[23,[20]]],7],[[[21,[20]]],7],[[]],[[],[[24,[20]]]],[[],[[23,[20]]]],[[],[[21,[20]]]],[28,4],[28,4],[[[23,[20]]],[[4,[7]]]],[[[21,[20]]],[[4,[7]]]],[[[24,[20]],20],7],[[[24,[20]],20],7],[[[23,[20]],[0,[1,15]]],[[0,[11,25,26,27]]]],[[[21,[20]],[0,[1,15]]],[[28,[20]]]],[[[23,[20]],1],7],[[[21,[20]],1],7],[[[24,[20]],[29,[7]]],7],[[[23,[20]]],2],[[[21,[20]]],4],[[[23,[20]]],7],[[[21,[20]]],7],[[[23,[20]],[29,[7]]],7],[[[21,[20]],[29,[7]]],7],[[[23,[20]],1],7],[[[21,[20]],1],7],[[[24,[20]],[29,[7]],20],7],[[[24,[20]],[29,[7]],10],7],[28],[[[21,[20]],[17,[20,7]],7,7]],[[[21,[20]],[17,[20,7]],7]],[[]],[[]],[[[23,[20]]]],[[[21,[20]]]],[[[23,[20]],1]],[[[21,[20]],1]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],0,[30,8],[30],0,[[]],[[]],[30,30],[[]],[[30,31,7],4],[[30,31,7],4],[30,32],[30,32],[[30,30],2],[[30,33],34],[[]],[[[8,[[8,[35]]]],35],30],0,[30],[30,2],[[]],[30,2],[30,32],[[30,7],8],[[7,7],30],[30,8],[30,8],[[]],[[],18],[[],18],[[],19],[30],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[7,7],[[8,[7]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[36,[15]]],[[36,[15]]]],[37,37],[[]],[[]],0,0,[[37,37],2],[[[36,[38]],33],34],[[37,33],34],[[]],[[]],[37],[[]],[[]],0,0,[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[39,7,7]],0,[[39,7,7],[[4,[[8,[7]]]]]],[[]],[[]],[[[39,[15]]],[[39,[15]]]],[[]],[[39,10],[[8,[36]]]],[[40,7],11],[[39,7],11],[[39,7,7],4],[[[39,[2]],7,7],[[4,[7]]]],[[40,7],11],[[39,7],11],[[40,7],11],[[39,7],11],[39,[[41,[4]]]],[[[39,[38]],33],34],[[]],[[7,10],39],[[7,10],39],[[]],0,0,[7,40],[7,39],[7,39],[[7,7],[[8,[7]]]],[39,39],[[40,3],42],[[39,3],42],[[40,3],42],[[39,3],42],[39,7],[7,40],[7,39],[40,[[42,[7]]]],[39,[[42,[7]]]],[[40,7],[[8,[7]]]],[[39,7],[[8,[7]]]],[39,[[8,[[8,[7]]]]]],[[]],[[],18],[[],18],[[],19],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[],18],[[],18],[[],19],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[43,[15]]],[[43,[15]]]],[[]],[[],[[43,[20]]]],[[]],[10,[[43,[20]]]],[[]],[[[43,[20]]],2],[[[43,[20]]],7],[[[43,[20]],[43,[20]]],[[43,[20]]]],[[],[[43,[20]]]],[[[43,[20]]],4],[[[43,[20]]],[[4,[20]]]],[[[43,[20]],20]],[[]],[[],18],[[],18],[[],19],[[]],0,0,[[]],[[]],[[]],[[]],[41,44],[41,44],[41,44],[41,44],[41,44],[41,44],[41,44],[41,44],[41,44],[41,44],[41,44],[41,44],[41,44],[41,44],[41,44],[41,44],[[[44,[[0,[15,45]],[0,[15,[46,[[0,[15,45]],[0,[15,45]]]]]]]]],[[44,[[0,[15,45]],[0,[15,[46,[[0,[15,45]],[0,[15,45]]]]]]]]]],[[[47,[15,15,[0,[15,[46,[15,15]]]]]]],[[47,[15,15,[0,[15,[46,[15,15]]]]]]]],[[]],[[]],[[],[[47,[45,45,[0,[45,[46,[45,45]]]]]]]],[[[44,[46]],33],34],[[[47,[46]],33],34],[[]],[[]],[[],[[47,[46]]]],[10,[[47,[46]]]],[[]],[[]],[[[47,[46]]],7],0,[[],[[44,[46]]]],[7,[[47,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[47,[46]],[29,[7]]]],[[[47,[46]],7]],[[[44,[46]]]],[[[44,[46]]],7],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[44,[46]]]],[[[47,[46]],[29,[7]]]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],19],[[]],[[]],[[]],[[]],[[],4],[[],4],[[]],[[]],[[],8],[[],8],[[]],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[48,2],[48,2],[[1,2,3],4],[[],5],[[],5],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[48,48]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,4],[48,48],[[[9,[15]]],[[9,[15]]]],[[[41,[15]]],[[41,[15]]]],[[[49,[15]]],[[49,[15]]]],[50,50],[[]],[[]],[[]],[[]],[[]],[[51,7,7]],[[51,7,7]],[50,[[8,[[8,[7]]]]]],[[[9,[20]]],7],[48,7],[48,7],[[[9,[20]],7]],[[],48],[[],[[9,[45]]]],[9],[7,[[8,[7]]]],[52],[[]],[[]],[[]],[[]],[[]],[[]],[[48,48],2],[[[41,[35]],41],2],[7,41],[[51,7]],[[51,7]],[[48,2]],[41],[41],[[50,7],7],[48,[[4,[2]]]],[41,4],[48,[[4,[7]]]],[48,[[4,[7]]]],[48],[[48,33],34],[[[9,[38]],33],34],[[41,33],34],[[41,33],34],[[50,33],34],[[],53],[[],53],[[],53],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,49],[[]],[[10,7],48],[[7,10],50],[8,41],[[],41],[[48,7],[[4,[2]]]],[41,4],[41,4],[[7,7],4],[[7,7],4],[48],[[[41,[54]]]],0,0,[[51,7]],[[48,7]],[41],[[41,7]],[[],9],[41],[[41,7]],[52,55],[52,55],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,56],0,0,0,0,0,[41,57],0,0,0,[48,11],0,0,[48,[[4,[2]]]],[41,4],[48,[[4,[7]]]],[48,[[4,[7]]]],[48,7],[49,7],[[]],[[]],[5],[5],[[41,41],41],[41,8],[[]],[[]],[[7,10],11],0,[[]],[[51,7]],[58,52],[7,51],[7,48],[[],41],[7,50],[48],[48],[[]],[7,48],[[]],[[7,7]],[[51,7,7]],[[51,7,7]],0,0,0,0,[[41,7],41],[[]],[41,41],[[]],[[]],[[]],[[]],[[]],[[]],[[49,[29,[7]]]],[48,8],[[48,7,2],2],[[48,7,2]],[50,11],[[]],0,[[50,7,7],2],[[],2],[[48,7,2]],[41],[[48,7]],[[48,7]],[[48,7]],[[48,7]],[[48,7]],[[48,7]],[41,7],[[50,7],7],[[],7],[[]],[41,41],[[[6,[12]]],12],[[]],[[]],[[]],[[]],[[]],[[],53],[41,41],0,0,0,0,[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[50,7,7],2],[[[9,[20]]],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,48],[[]],[29],[29],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[59,31],2],[[60,61],2],[[62,5],2],[[63,64],2],[[65,66],2],[[],59],[[],60],[[],62],[[],63],[[],65],[[]],[[]],[[]],[[]],[[]],[[59,31],2],[[60,61],2],[[62,5],2],[[63,64],2],[[65,66],2],[[]],[[]],[[]],[[]],[[]],[[],59],[[],60],[[],62],[[],63],[[],65],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]]],"p":[[8,"RangeBounds"],[15,"bool"],[8,"FnMut"],[4,"Option"],[15,"u32"],[3,"Range"],[15,"usize"],[3,"Vec"],[3,"IndexCompressed"],[8,"IntoIterator"],[8,"Iterator"],[15,"f64"],[3,"AugTreap"],[3,"Node"],[8,"Clone"],[3,"Range"],[6,"OptNode"],[4,"Result"],[3,"TypeId"],[8,"Ord"],[3,"OrderTreap"],[3,"OrderAugFn"],[3,"SortedList"],[3,"List"],[8,"DoubleEndedIterator"],[8,"ExactSizeIterator"],[8,"FusedIterator"],[3,"Range"],[8,"Rangelike"],[3,"Gameboard"],[15,"u8"],[3,"ArrayVec"],[3,"Formatter"],[6,"Result"],[8,"PartialEq"],[3,"DfsStep"],[4,"DfsStepKind"],[8,"Debug"],[3,"Graph"],[6,"Tree"],[3,"NdVec"],[3,"BTreeMap"],[3,"MeldHeapWithDir"],[3,"NdFenwick"],[8,"Default"],[8,"MonoidOps"],[3,"SegTree"],[3,"BVec"],[3,"SparseTable"],[3,"UnionFind"],[3,"FactorialTable"],[3,"Ipc"],[3,"String"],[8,"Hash"],[8,"Source"],[3,"Iter"],[3,"IterMut"],[3,"Command"],[3,"XorBasis8"],[3,"XorBasis16"],[15,"u16"],[3,"XorBasis32"],[3,"XorBasis64"],[15,"u64"],[3,"XorBasis128"],[15,"u128"],[4,"MoStep"],[8,"PairMut"],[8,"GetSub"],[8,"PrefixSums"],[8,"Vector2DMore"],[8,"IndexCompress"],[8,"Insort"],[8,"OptionMerge"],[8,"UnwrapAny"],[8,"IntBitOps"],[8,"Divisors"],[8,"OrdPair"],[8,"CountInversions"],[8,"AugFn"],[8,"Finger"],[4,"RsfStep"],[13,"Leaf"],[13,"Parent"],[13,"Sibling"],[3,"USumQSum"],[8,"PrintMethods"]]},\
"rithmic_impl":{"doc":"","t":[24,23,23,23,23,14,23],"n":["CmpByKey","autofill","memoize","opaque","semitransparent","struct_input","transparent"],"q":["rithmic_impl","","","","","",""],"d":["Derive <code>PartialEq</code>, <code>Eq</code>, <code>PartialOrd</code> and <code>Ord</code> for a struct, but …","Create a wrapper macro with the same name as a given …","Memoize a function based on some or all of its arguments","See <code>transparent</code>","See <code>transparent</code>","Given a <code>::proconio</code> input specification and a <code>Name</code>, define:","Change the hygiene of a declarative macro"],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
