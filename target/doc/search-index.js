var searchIndex = JSON.parse('{\
"ac_library_rs":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,0,0,2,2,0,2,2,0,0,0,0,2,0,0,0,2,2,2,0,2,2,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,16,3,16,8,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,5,5,5,5,3,3,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,3,3,11,11,11,11,11,12,12,11,11,12,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,3,3,4,3,18,8,4,4,6,6,6,8,8,8,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,3,3,8,3,16,3,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11],"n":["Additive","Barrett","ButterflyCache","DefaultId","Dsu","DynamicModInt","Edge","FenwickTree","Id","LazySegtree","MapMonoid","Max","MfGraph","Min","MinCostFlowGraph","Mod1000000007","Mod998244353","ModInt","ModInt1000000007","ModInt998244353","Modulus","Monoid","Multiplicative","RemEuclidU32","SccGraph","Segtree","StaticModInt","TwoSat","convolution","convolution","convolution_i64","crt","dsu","fenwicktree","floor_sum","inv_mod","lazysegtree","lcp_array","lcp_array_arbitrary","math","maxflow","mincostflow","modint","pow_mod","scc","segtree","string","suffix_array","suffix_array_arbitrary","suffix_array_manual","twosat","z_algorithm","z_algorithm_arbitrary","convolution","convolution_i64","convolution_raw","Dsu","borrow","borrow_mut","from","groups","into","leader","merge","new","same","size","try_from","try_into","type_id","FenwickTree","accum","add","borrow","borrow_mut","from","into","new","sum","try_from","try_into","type_id","F","LazySegtree","M","MapMonoid","all_prod","apply","apply_range","binary_operation","borrow","borrow_mut","composition","default","fmt","from","from","get","identity_element","identity_map","into","mapping","max_right","min_left","new","prod","set","try_from","try_into","type_id","crt","floor_sum","inv_mod","pow_mod","Edge","MfGraph","add_edge","borrow","borrow","borrow_mut","borrow_mut","cap","change_edge","default","edges","eq","flow","flow","flow_with_capacity","fmt","from","from","from","get_edge","into","into","min_cut","new","to","try_from","try_from","try_into","try_into","type_id","type_id","MinCostFlowEdge","MinCostFlowGraph","add_edge","borrow","borrow","borrow_mut","borrow_mut","cap","cost","edges","flow","flow","from","from","from","get_edge","into","into","new","slope","to","try_from","try_from","try_into","try_into","type_id","type_id","Barrett","ButterflyCache","DefaultId","DynamicModInt","HINT_VALUE_IS_PRIME","Id","Mod1000000007","Mod998244353","ModInt","ModInt1000000007","ModInt998244353","ModIntBase","Modulus","RemEuclidU32","StaticModInt","VALUE","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","butterfly_cache","butterfly_cache","butterfly_cache","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","companion_barrett","companion_barrett","default","default","default","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","inv","inv","inv","inv","inv","modulus","modulus","modulus","modulus","modulus","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","product","product","product","product","raw","raw","raw","raw","raw","rem_euclid_u32","set_modulus","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","val","val","val","val","val","SccGraph","add_edge","borrow","borrow_mut","from","into","new","scc","try_from","try_into","type_id","Additive","Max","Min","Monoid","Multiplicative","S","Segtree","all_prod","binary_operation","binary_operation","binary_operation","binary_operation","binary_operation","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","from","from","from","from","from","from","get","identity","identity","identity","identity","identity","into","into","into","into","into","max_right","min_left","new","prod","set","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","lcp_array","lcp_array_arbitrary","suffix_array","suffix_array_arbitrary","suffix_array_manual","z_algorithm","z_algorithm_arbitrary","TwoSat","add_clause","answer","borrow","borrow_mut","from","into","new","satisfiable","try_from","try_into","type_id"],"q":["ac_library_rs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ac_library_rs::convolution","","","ac_library_rs::dsu","","","","","","","","","","","","","","ac_library_rs::fenwicktree","","","","","","","","","","","","ac_library_rs::lazysegtree","","","","","","","","","","","","","","","","","","","","","","","","","","","","ac_library_rs::math","","","","ac_library_rs::maxflow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ac_library_rs::mincostflow","","","","","","","","","","","","","","","","","","","","","","","","","","","ac_library_rs::modintac_library_rs::scc","","","","","","","","","","","ac_library_rs::segtree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ac_library_rs::string","","","","","","","ac_library_rs::twosat","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Disjoint set union (DSU) with union by size and path …","","","","","","","Number-theoretic algorithms.","","","Structs that treat the modular arithmetic.","","","","","","","","A 2-SAT Solver.","","","","","","A Disjoint set union (DSU) with union by size and path …","","","Returns the argument unchanged.","Divides the graph into connected components.","Calls <code>U::from(self)</code>.","Performs the Fɪɴᴅ operation.","Performs the Uɴɪᴏɴ operation.","Creates a new <code>Dsu</code>.","Returns whether the vertices $a$ and $b$ are in the same …","Returns the size of the connected component that contains …","","","","","","performs data[idx] += val;","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Returns data[l] + … + data[r - 1].","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Performs CRT (Chinese Remainder Theorem).","Returns $\\\\sum_{i = 0}^{n - 1} \\\\lfloor \\\\frac{a \\\\times i + …","Returns an integer $y \\\\in [0, m)$ such that $xy \\\\equiv 1 …","Returns $x^n \\\\bmod m$.","","","","","","","","","","","","","<code>s != t</code> must hold, otherwise it panics.","","Parameters","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns (maximum flow, cost)","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Pair of <em>m</em> and <em>ceil(2⁶⁴/m)</em>.","Cache for butterfly operations.","","Represents <em>ℤ/mℤ</em> where <em>m</em> is a dynamic value.","","","Represents <em>1000000007</em>.","Represents <em>998244353</em>.","","","","A trait for <code>StaticModInt</code> and <code>DynamicModInt</code>.","Represents a modulus.","A trait for <code>{StaticModInt, DynamicModInt, ModIntBase}::new</code>.","Represents <em>ℤ/mℤ</em> where <em>m</em> is a constant value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Retruns the multiplicative inverse of <code>self</code>.","","Retruns the multiplicative inverse of <code>self</code>.","","Retruns the multiplicative inverse of <code>self</code>.","Returns the modulus.","Returns the modulus, which is <code>&lt;M as Modulus&gt;::VALUE</code>.","","Returns the modulus.","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Barrett</code>.","Creates a new <code>Self</code>.","Creates a new <code>StaticModInt</code>.","Creates a new <code>DynamicModInt</code>.","","","","Returns <code>self</code> to the power of <code>n</code>.","Returns <code>self</code> to the power of <code>n</code>.","Returns <code>self</code> to the power of <code>n</code>.","","","","","Constructs a <code>Self</code> from a <code>val &lt; Self::modulus()</code> without …","Constructs a <code>StaticModInt</code> from a <code>val &lt; Self::modulus()</code> …","","Constructs a <code>DynamicModInt</code> from a <code>val &lt; Self::modulus()</code> …","","Calculates <code>self</code> <em>mod</em> <code>modulus</code> losslessly.","Sets a modulus.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retruns the representative.","Retruns the representative.","","Retruns the representative.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 2-SAT Solver.","Adds a clause $(x_i = f) \\\\lor (x_j = g)$.","Returns a truth assignment that satisfies all clauses <strong>of </strong>…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new <code>TwoSat</code> of <code>n</code> variables and 0 clauses.","Returns whether there is a truth assignment that satisfies …","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,0,11,11,11,11,11,11,11,11,11,11,11,12,0,12,0,13,13,13,12,13,13,12,13,13,13,13,13,12,12,13,12,13,13,13,13,13,13,13,13,0,0,0,0,0,0,17,19,17,19,17,19,17,17,17,19,17,19,17,19,19,17,19,17,19,17,17,17,19,19,17,19,17,19,17,0,0,23,24,23,24,23,24,24,23,23,24,24,23,24,23,24,23,23,23,24,24,23,24,23,24,23,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,25,1,1,1,1,1,28,28,28,28,28,1,1,1,28,28,28,45,34,1,30,31,28,32,45,34,1,30,31,28,32,25,30,31,1,30,31,28,32,1,30,31,28,32,30,31,32,27,32,34,1,28,1,1,1,1,1,28,28,28,28,28,1,1,1,28,28,28,1,30,31,28,32,1,1,30,31,28,28,32,45,34,1,1,30,31,28,28,32,1,28,1,30,31,28,32,45,34,1,30,31,28,32,46,1,1,28,28,46,1,1,28,28,1,1,1,1,1,28,28,28,28,28,1,1,1,28,28,28,1,1,28,28,34,46,1,28,30,31,32,46,1,28,1,1,28,28,46,1,1,28,28,26,28,1,1,1,1,1,28,28,28,28,28,1,1,1,28,28,28,1,1,28,28,1,30,31,28,32,1,28,45,34,1,30,31,28,32,45,34,1,30,31,28,32,45,34,1,30,31,28,32,46,1,1,28,28,0,40,40,40,40,40,40,40,40,40,40,0,0,0,0,0,41,0,42,41,47,48,49,50,47,48,49,50,42,47,48,49,50,42,42,47,48,49,50,42,42,42,41,47,48,49,50,47,48,49,50,42,42,42,42,42,42,47,48,49,50,42,47,48,49,50,42,47,48,49,50,42,0,0,0,0,0,0,0,0,44,44,44,44,44,44,44,44,44,44,44],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[[],[[2,[3]]]],[[],2],0,[[]],[[]],[[]],[4,[[2,[[2,[5]]]]]],[[]],[[4,5],5],[[4,5,5],5],[5,4],[[4,5,5],6],[[4,5],5],[[],7],[[],7],[[],8],0,[[[11,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]],5],[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]]]]]],[[[11,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]],5,9]],[[]],[[]],[[]],[[]],[[5,[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]]]]],[[11,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]]]],[[[11,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]],5,5],[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,[10,[[0,[9,10]]]]]]]]]]]]]]]]]]]],[[],7],[[],7],[[],8],0,0,0,0,[[[13,[12]]]],[[[13,[12]],5]],[[[13,[12]],5,5]],[[]],[[]],[[]],[[]],[[],[[13,[12]]]],[[13,14],[[7,[15]]]],[[]],[2,[[13,[12]]]],[[[13,[12]],5]],[[]],[[]],[[]],[[]],[[[13,[12]],5],5],[[[13,[12]],5],5],[5,[[13,[12]]]],[[[13,[12]],5,5]],[[[13,[12]],5]],[[],7],[[],7],[[],8],[[]],[[3,3,3,3],3],[[3,3],3],[[3,3,16],16],0,0,[[17,5,5],5],[[]],[[]],[[]],[[]],0,[[17,5]],[[],[[17,[18]]]],[17,[[2,[19]]]],[[[19,[[0,[20,0]]]],19],6],[[17,5,5]],0,[[17,5,5]],[[[19,[[0,[21,0]]]],14],22],[[]],[[]],0,[[17,5],19],[[]],[[]],[[17,5],[[2,[6]]]],[5,17],0,[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,[[23,5,5],5],[[]],[[]],[[]],[[]],0,0,[23,[[2,[24]]]],[[23,5,5]],0,[[]],[[]],0,[[23,5],24],[[]],[[]],[5,23],[[23,5,5],2],0,[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[25]],1],[[1,[25]]]],[[[1,[25]],[1,[25]]],[[1,[25]]]],[[[1,[25]],26],[[1,[25]]]],[[1,[1,[25]]],[[1,[25]]]],[[1,1],[[1,[25]]]],[[[28,[27]],28],[[28,[27]]]],[[[28,[27]],[28,[27]]],[[28,[27]]]],[[[28,[27]],26],[[28,[27]]]],[[28,28],[[28,[27]]]],[[28,[28,[27]]],[[28,[27]]]],[[[1,[25]],26]],[[[1,[25]],1]],[[[1,[25]],[1,[25]]]],[[[28,[27]],26]],[[[28,[27]],28]],[[[28,[27]],[28,[27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[[1,[9]]],[[1,[9]]]],[30,30],[31,31],[[[28,[9]]],[[28,[9]]]],[32,32],[[]],[[]],[[]],[[]],[[]],[[30,30],33],[[31,31],33],[[32,32],33],[[],34],[[],34],[[],34],[[],[[1,[25]]]],[[],[[28,[27]]]],[[[1,[25]],[1,[25]]],[[1,[25]]]],[[1,1],[[1,[25]]]],[[1,[1,[25]]],[[1,[25]]]],[[[1,[25]],1],[[1,[25]]]],[[[1,[25]],26],[[1,[25]]]],[[[28,[27]],[28,[27]]],[[28,[27]]]],[[[28,[27]],28],[[28,[27]]]],[[[28,[27]],26],[[28,[27]]]],[[28,[28,[27]]],[[28,[27]]]],[[28,28],[[28,[27]]]],[[[1,[25]],26]],[[[1,[25]],1]],[[[1,[25]],[1,[25]]]],[[[28,[27]],26]],[[[28,[27]],28]],[[[28,[27]],[28,[27]]]],[[[1,[20]],1],6],[[30,30],6],[[31,31],6],[[[28,[20]],28],6],[[32,32],6],[[[1,[25]],14],22],[[[1,[25]],14],22],[[30,14],22],[[31,14],22],[[[28,[27]],14],22],[[[28,[27]],14],22],[[32,14],22],[[]],[[]],[[]],[26,[[1,[25]]]],[[]],[[]],[26,[[28,[27]]]],[[]],[[]],[35,[[7,[[1,[25]],36]]]],[35,[[7,[[28,[27]],36]]]],[[[1,[25]]]],[30],[31],[[[28,[27]]]],[32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[1,[25]]],[[1,[25]]]],[[[1,[25]]],[[1,[25]]]],[[[28,[27]]],[[28,[27]]]],[[[28,[27]]],[[28,[27]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[[1,[25]],26],[[1,[25]]]],[[[1,[25]],[1,[25]]],[[1,[25]]]],[[1,[1,[25]]],[[1,[25]]]],[[[1,[25]],1],[[1,[25]]]],[[1,1],[[1,[25]]]],[[[28,[27]],26],[[28,[27]]]],[[[28,[27]],[28,[27]]],[[28,[27]]]],[[[28,[27]],28],[[28,[27]]]],[[28,[28,[27]]],[[28,[27]]]],[[28,28],[[28,[27]]]],[[[1,[25]],26]],[[[1,[25]],1]],[[[1,[25]],[1,[25]]]],[[[28,[27]],28]],[[[28,[27]],[28,[27]]]],[[[28,[27]],26]],[[[1,[25]]],[[1,[25]]]],[1,[[1,[25]]]],[[[28,[27]]],[[28,[27]]]],[28,[[28,[27]]]],[16,34],[26],[26,[[1,[25]]]],[26,[[28,[27]]]],[[30,30],[[37,[33]]]],[[31,31],[[37,[33]]]],[[32,32],[[37,[33]]]],[38],[[[1,[25]],38],[[1,[25]]]],[[[28,[27]],38],[[28,[27]]]],[[],[[1,[25]]]],[[],[[1,[25]]]],[[],[[28,[27]]]],[[],[[28,[27]]]],[16],[16,[[1,[25]]]],[16,[[1,[25]]]],[16,[[28,[27]]]],[16,[[28,[27]]]],[16,16],[16],[[[1,[25]],26],[[1,[25]]]],[[1,1],[[1,[25]]]],[[[1,[25]],[1,[25]]],[[1,[25]]]],[[1,[1,[25]]],[[1,[25]]]],[[[1,[25]],1],[[1,[25]]]],[[28,[28,[27]]],[[28,[27]]]],[[[28,[27]],26],[[28,[27]]]],[[[28,[27]],28],[[28,[27]]]],[[[28,[27]],[28,[27]]],[[28,[27]]]],[[28,28],[[28,[27]]]],[[[1,[25]],26]],[[[1,[25]],1]],[[[1,[25]],[1,[25]]]],[[[28,[27]],26]],[[[28,[27]],28]],[[[28,[27]],[28,[27]]]],[[],[[1,[25]]]],[[],[[1,[25]]]],[[],[[28,[27]]]],[[],[[28,[27]]]],[[]],[[]],[[]],[[]],[[]],[[],39],[[],39],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],16],[[[1,[25]]],16],[[[1,[25]]],16],[[[28,[27]]],16],[[[28,[27]]],16],0,[[40,5,5]],[[]],[[]],[[]],[[]],[5,40],[40,[[2,[[2,[5]]]]]],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,[[[42,[41]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[42,[41]]]],[[]],[[]],[[]],[[]],[[]],[2,[[42,[41]]]],[[[42,[41]],5]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[42,[41]],5],5],[[[42,[41]],5],5],[5,[[42,[41]]]],[[[42,[41]],5,5]],[[[42,[41]],5]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[35,[[2,[5]]]],[[],[[2,[5]]]],[35,[[2,[5]]]],[[],[[2,[5]]]],[43,[[2,[5]]]],[35,[[2,[5]]]],[[],[[2,[5]]]],0,[[44,5,6,5,6]],[44],[[]],[[]],[[]],[[]],[5,44],[44,6],[[],7],[[],7],[[],8]],"p":[[3,"StaticModInt"],[3,"Vec"],[15,"i64"],[3,"Dsu"],[15,"usize"],[15,"bool"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[8,"AddAssign"],[3,"FenwickTree"],[8,"MapMonoid"],[3,"LazySegtree"],[3,"Formatter"],[3,"Error"],[15,"u32"],[3,"MfGraph"],[8,"Default"],[3,"Edge"],[8,"PartialEq"],[8,"Debug"],[6,"Result"],[3,"MinCostFlowGraph"],[3,"MinCostFlowEdge"],[8,"Modulus"],[8,"RemEuclidU32"],[8,"Id"],[3,"DynamicModInt"],[3,"LocalKey"],[4,"Mod1000000007"],[4,"Mod998244353"],[4,"DefaultId"],[4,"Ordering"],[3,"Barrett"],[15,"str"],[4,"Infallible"],[4,"Option"],[15,"u64"],[3,"String"],[3,"SccGraph"],[8,"Monoid"],[3,"Segtree"],[15,"i32"],[3,"TwoSat"],[3,"ButterflyCache"],[8,"ModIntBase"],[3,"Max"],[3,"Min"],[3,"Additive"],[3,"Multiplicative"]]},\
"euclid":{"doc":"A collection of strongly typed math tools for computer …","t":[12,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,10,5,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,11,10,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,10,10,10,10,10],"n":["0","0","Angle","BoolVector2D","BoolVector3D","Box2D","Box3D","HomogeneousVector","Length","Point2D","Point3D","Rect","RigidTransform3D","Rotation2D","Rotation3D","Scale","SideOffsets2D","Size2D","Size3D","Transform2D","Transform3D","Translation2D","Translation3D","Trig","UnknownUnit","Vector2D","Vector3D","abs","abs","abs","abs","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_size","add_size","all","all","and","and","angle","angle_from_x_axis","angle_to","angle_to","angle_to","any","any","approx_epsilon","approx_epsilon","approx_epsilon","approx_epsilon","approx_epsilon","approx_epsilon","approx_epsilon","approx_epsilon","approx_epsilon","approx_eq","approx_eq","approx_eq_eps","approx_eq_eps","approx_eq_eps","approx_eq_eps","approx_eq_eps","approx_eq_eps","approx_eq_eps","approx_eq_eps","approx_eq_eps","approx_eq_eps","approx_eq_eps","approxeq","approxord","area","area","area","around_axis","around_x","around_y","around_z","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","box3d","bvec2","bvec3","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast_unit","cast_unit","cast_unit","cast_unit","cast_unit","cast_unit","cast_unit","cast_unit","cast_unit","cast_unit","cast_unit","cast_unit","cast_unit","ceil","ceil","ceil","ceil","ceil","ceil","ceil","ceil","ceil","ceil","ceil","ceil","center","center","center","clamp","clamp","clamp","clamp","clamp","clamp","clamp_length","clamp_length","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","component_div","component_div","component_mul","component_mul","contains","contains","contains","contains","contains","contains_box","contains_box","contains_rect","cos","cross","cross","decompose_reversed","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","degrees","degrees_to_radians","depth","depth","determinant","determinant","distance_to","distance_to","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dot","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","equal","equal","equal","euler","extend","extend","fast_atan2","floor","floor","floor","floor","floor","floor","floor","floor","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frac_pi_2","frac_pi_3","frac_pi_4","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_angle_and_length","from_array","from_array","from_arrays","from_arrays","from_length_all_same","from_lengths","from_lengths","from_lengths","from_lengths","from_lengths","from_lengths","from_lengths","from_origin_and_size","from_points","from_points","from_points","from_rotation","from_scale","from_size","from_size","from_size","from_translation","from_untyped","from_untyped","from_untyped","from_untyped","from_untyped","from_untyped","from_untyped","from_untyped","from_untyped","from_untyped","from_untyped","from_untyped","from_untyped","from_untyped","from_untyped","from_untyped","from_vectors_inner","from_vectors_outer","get","get","get","get_angle","greater_than","greater_than","greater_than","greater_than","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","height","height","height","height","horizontal","i","identity","identity","identity","identity","identity","identity","identity","identity","inflate","inflate","inflate","inner_box","inner_rect","intersection","intersection","intersection","intersection_unchecked","intersection_unchecked","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_2d","is_backface_visible","is_empty","is_empty","is_empty","is_empty","is_empty","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_identity","is_identity","is_identity","is_invertible","is_invertible","is_negative","is_negative","is_normalized","is_positive","is_positive","is_zero","j","k","left","length","length","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lerp","lower_than","lower_than","lower_than","lower_than","m11","m11","m12","m12","m13","m14","m21","m21","m22","m22","m23","m24","m31","m31","m32","m32","m33","m34","m41","m42","m43","m44","max","max","max","max","max","max","max","max","max","max","max_x","max_y","min","min","min","min","min","min","min","min","min","min","min_x","min_y","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_s","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_2d","new_all_same","new_from_reversed","none","none","norm","normalize","normalize","normalize","not","not","not_equal","not_equal","not_equal","not_equal","num","one","one","one","or","or","origin","origin","origin","ortho","outer_box","outer_rect","outer_transformed_box","outer_transformed_box2d","outer_transformed_box3d","outer_transformed_rect","outer_transformed_rect","partial_cmp","partial_cmp","partial_cmp","partial_cmp","perspective","pi","point2","point3","positive","pre_rotate","pre_rotate","pre_scale","pre_scale","pre_translate","pre_translate","project_onto_vector","project_onto_vector","project_to_2d","quaternion","r","radians","radians","radians","radians_to_degrees","rect","reflect","reflect","right","robust_normalize","robust_normalize","rotation","rotation","rotation","round","round","round","round","round","round","round","round","round","round","round","round","round","round","round","round_in","round_in","round_in","round_out","round_out","round_out","saturating_add","saturating_sub","scale","scale","scale","scale","scale","select_point","select_point","select_size","select_size","select_vector","select_vector","set_size","signed","sin","sin_cos","size","size","size","size2","size3","skew","slerp","splat","splat","splat","splat","splat","splat","splat","splat","square_length","square_length","square_norm","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","tan","then","then","then","then","then","then_rotate","then_rotate","then_scale","then_scale","then_translate","then_translate","to_2d","to_2d","to_2d","to_3d","to_3d","to_3d","to_3d","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array","to_array_4d","to_array_4d","to_array_transposed","to_array_transposed","to_arrays","to_arrays","to_arrays_transposed","to_box2d","to_degrees","to_f32","to_f32","to_f32","to_f32","to_f32","to_f32","to_f32","to_f32","to_f32","to_f32","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_i32","to_i32","to_i32","to_i32","to_i32","to_i32","to_i32","to_i32","to_i32","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_non_empty","to_non_empty","to_non_empty","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_point","to_point","to_point2d","to_point3d","to_rect","to_size","to_transform","to_transform","to_transform","to_transform","to_transform","to_transform","to_transform","to_tuple","to_tuple","to_tuple","to_tuple","to_tuple","to_tuple","to_tuple","to_tuple","to_tuple_4d","to_tuple_4d","to_u32","to_u32","to_u32","to_u32","to_u32","to_u32","to_u32","to_u32","to_u32","to_u64","to_u64","to_untyped","to_untyped","to_untyped","to_untyped","to_untyped","to_untyped","to_untyped","to_untyped","to_untyped","to_untyped","to_untyped","to_untyped","to_untyped","to_untyped","to_untyped","to_untyped","to_usize","to_usize","to_usize","to_usize","to_usize","to_usize","to_usize","to_usize","to_usize","to_vector","to_vector","to_vector","to_vector","to_vector","to_vector","top","transform_box","transform_box2d","transform_box2d","transform_box3d","transform_box3d","transform_point","transform_point","transform_point","transform_point","transform_point2d","transform_point2d","transform_point2d","transform_point2d_homogeneous","transform_point3d","transform_point3d","transform_point3d","transform_point3d","transform_point3d_homogeneous","transform_rect","transform_rect","transform_rect","transform_size","transform_size","transform_size","transform_vector","transform_vector","transform_vector","transform_vector2d","transform_vector2d","transform_vector3d","transform_vector3d","translate","translate","translate","translation","translation","translation","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_cast","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_normalize","try_normalize","two_pi","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","unit_quaternion","vec2","vec3","vector_part","vertical","volume","volume","w","width","width","width","width","width","with_destination","with_destination","with_length","with_max_length","with_max_length","with_min_length","with_min_length","with_source","with_source","x","x","x","x","x","x","x","x","x","x_range","x_range","x_range","xy","xy","xy","xy_area","xz","xz","xz","xz_area","y","y","y","y","y","y","y","y","y","y_range","y_range","y_range","yx","yx","yz","yz","yz","yz_area","z","z","z","z","z","z_range","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","ApproxEq","approx_epsilon","approx_eq","approx_eq_eps","max","min","Box2D","Box3D","HomogeneousVector","Length","Point2D","Point3D","Rect","RigidTransform3D","Rotation2D","Rotation3D","Scale","SideOffsets2D","Size2D","Size3D","Transform2D","Transform3D","Translation2D","Translation3D","Vector2D","Vector3D","Ceil","Floor","One","Round","Zero","ceil","floor","one","round","zero"],"q":["euclideuclid::approxeq","","","","euclid::approxord","","euclid::default","","","","","","","","","","","","","","","","","","","","euclid::num","","","","","","","","",""],"d":["","","An angle in radians","A 2d vector of booleans, useful for component-wise logic …","A 3d vector of booleans, useful for component-wise logic …","A 2d axis aligned rectangle represented by its minimum and …","An axis aligned 3D box represented by its minimum and …","Homogeneous vector in 3D space.","A one-dimensional distance, with value represented by <code>T</code> …","A 2d Point tagged with a unit.","A 3d Point tagged with a unit.","A 2d Rectangle optionally tagged with a unit.","A rigid transformation. All lengths are preserved under …","A transform that can represent rotations in 2d, …","A transform that can represent rotations in 3d, …","A scaling factor between two different units of …","A group of 2D side offsets, which correspond to …","A 2d size tagged with a unit.","A 3d size tagged with a unit.","A 2d transform represented by a column-major 3 by 3 …","A 3d transform stored as a column-major 4 by 4 matrix.","A 2d transformation from a space to another that can only …","A 3d transformation from a space to another that can only …","Trait for basic trigonometry functions, so they can be …","The default unit.","A 2d Vector tagged with a unit.","A 3d Vector tagged with a unit.","Computes the absolute value of each component.","Computes the absolute value of each component.","Computes the vector with absolute values of each component.","Computes the vector with absolute values of each component.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all components are <code>true</code> and <code>false</code> …","Returns <code>true</code> if all components are <code>true</code> and <code>false</code> …","Returns new vector with by-component AND operation applied.","Returns new vector with by-component AND operation applied.","Angle in radians","Returns the signed angle between this vector and the x …","Returns the signed angle between this vector and another …","Returns the positive angle between this vector and another …","Returns the shortest signed angle between two angles.","Returns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.","Returns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.","","","","","","","","","","Returns true is this transform is approximately equal to …","Returns true is this transform is approximately equal to …","","","","","Returns true is this transform is approximately equal to …","Returns true is this transform is approximately equal to …","Returns true is this transform is approximately equal to …","","","","","","Utilities for testing approximate ordering - especially …","","","Returns result of multiplication of both components","Creates a rotation around a given axis.","Creates a rotation around the x axis.","Creates a rotation around the y axis.","Creates a rotation around the z axis.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shorthand for …","Shorthand for <code>BoolVector2D { x, y }</code>.","Shorthand for <code>BoolVector3D { x, y, z }</code>.","Cast from one numeric representation to another, …","Cast from one numeric representation to another, …","Cast from one numeric representation to another, …","Cast from one numeric representation to another, …","Cast from one numeric representation to another, …","Cast from one numeric representation to another, …","Cast from one numeric representation to another, …","Cast from one numeric representation to another, …","Cast from one numeric representation to another, …","Cast from one numeric representation to another, …","Cast from one numeric representation to another, …","Cast from one numeric representation to another, …","Cast from one numeric representation to another, …","Cast from one numeric representation to another.","Cast the unit","Cast the unit","Cast the unit","Cast the unit, preserving the numeric value.","Cast the unit, preserving the numeric value.","Cast the unit","Cast the unit, preserving the numeric value.","Cast the unit, preserving the numeric value.","Cast the unit","Cast the unit","Cast the unit.","Cast the unit.","","Rounds each component to the smallest integer equal or …","See Point2D::ceil()","Rounds each component to the smallest integer equal or …","See Point3D::ceil()","See <code>Size2D::ceil()</code>.","Rounds each component to the smallest integer equal or …","Rounds each component to the smallest integer equal or …","See <code>Size3D::ceil()</code>.","Rounds each component to the smallest integer equal or …","See <code>Vector2D::ceil()</code>","See <code>Vector3D::ceil()</code>","Rounds each component to the smallest integer equal or …","","","","Returns the point each component of which clamped by …","Returns the point each component of which clamped by …","Returns the size each component of which clamped by …","Returns the size each component of which clamped by …","Returns the vector each component of which is clamped by …","Returns the vector each component of which is clamped by …","Return this vector with minimum and maximum lengths …","Return this vector with minimum and maximum lengths …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the component-wise division of the two vectors.","Returns the component-wise division of the two vectors.","Returns the component-wise multiplication of the two …","Returns the component-wise multiplication of the two …","Returns <code>true</code> if this box contains the point. Points are …","Returns <code>true</code> if this box3d contains the point. Points are …","Returns true if this rectangle contains the point. Points …","","","Returns <code>true</code> if this box contains the interior of the …","Returns <code>true</code> if this box3d contains the interior of the …","Returns true if this rectangle contains the interior of …","","Returns the norm of the cross product [self.x, self.y, 0] …","Cross product.","Decompose this into a translation and an rotation to be …","A set of aliases for all types, tagged with the default …","","","","","","","","","","","Returns the identity transform.","Returns the identity transform.","","","","","","","","","","The extent of the element in the <code>U</code> units along the <code>z</code> axis.","Computes and returns the determinant of this transform.","Compute the determinant of the transform.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dot product.","Dot product.","","","","","","","","","","","","","","","","","","","","","","","","","Returns vector with results of “equal” operation on …","Returns vector with results of “equal” operation on …","Returns vector with results of “equal” operation on …","Returns vector with results of “equal” operation on …","Creates a rotation from Euler angles.","Create a 3d point from this one, using the specified z …","Create a 3d vector from this one, using the specified z …","","See Point2D::floor()","Rounds each component to the biggest integer equal or …","See Point3D::floor()","Rounds each component to the biggest integer equal or …","Rounds each component to the biggest integer equal or …","See <code>Size2D::floor()</code>.","Rounds each component to the biggest integer equal or …","See <code>Size3D::floor()</code>.","Rounds each component to the biggest integer equal or …","See <code>Vector2D::floor()</code>","See <code>Vector3D::floor()</code>","Rounds each component to the biggest integer equal or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructor taking angle and length","Create a transform providing its components via an array …","Create a transform providing its components via an array …","Equivalent to <code>from_array</code> with elements packed two at a time","Equivalent to <code>from_array</code> with elements packed four at a …","Constructor setting the same value to all sides, taking a …","Constructor taking properly Lengths instead of scalar …","Constructor taking properly Lengths instead of scalar …","Constructor taking a typed Length for each side.","Constructor taking scalar strongly typed lengths.","Constructor taking scalar strongly typed lengths.","Constructor taking properly  Lengths instead of scalar …","Constructor taking properly  Lengths instead of scalar …","Constructor.","Returns the smallest box containing all of the provided …","Returns the smallest box containing all of the provided …","Returns the smallest rectangle defined by the …","","Convenience function to create a scale transform from a …","Creates a Box2D of the given size, at offset zero.","Creates a Box3D of the given size, at offset zero.","Creates a rect of the given size, at offset zero.","","Tag a unitless value with units.","Tag a unitless value with units.","Tag a unitless value with units.","Tag a unitless value with units.","Tag a unitless value with units.","Tag a unitless value with units.","Tag a unitless value with units.","Tag a unitless value with units.","Tag a unitless value with units.","Tag a unitless value with units.","Tag a unitless value with units.","Tag a unitless value with units.","Tag a unitless value with units.","Tag a unit-less value with units.","Tag a unitless value with units.","Tag a unitless value with units.","Construct side offsets from min and a max vector offsets.","Construct side offsets from min and a max vector offsets.","Unpack the underlying value from the wrapper.","Returns the underlying scalar scale factor.","","Returns self.angle as a strongly typed <code>Angle&lt;T&gt;</code>.","Returns vector with results of “greater then” …","Returns vector with results of “greater than” …","Returns vector with results of “greater than” …","Returns vector with results of “greater than” …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The extent of the element in the <code>U</code> units along the <code>y</code> axis …","The extent of the element in the <code>U</code> units along the <code>y</code> axis.","","Component multiplied by the imaginary number <code>i</code>.","Creates the identity rotation.","Creates the identity rotation.","Creates an identity scale (1.0).","Create an identity matrix:","Creates an identity matrix:","Creates no-op translation (both <code>x</code> and <code>y</code> is <code>zero()</code>).","Creates no-op translation (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).","Construct an identity transform","Inflates the box by the specified sizes on each side …","Inflates the box by the specified sizes on each side …","","Calculate the size and position of an inner box.","Calculate the size and position of an inner rectangle.","Computes the intersection of two boxes, returning <code>None</code> if …","","","Computes the intersection of two boxes without check …","","Returns <code>true</code> if the two boxes intersect.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inverse of this rotation.","Returns the inverse of this rotation.","The inverse Scale (1.0 / self).","Returns the inverse transform if possible.","Returns the inverse transform if possible.","Return the inverse transformation.","Return the inverse transformation.","Inverts the transformation","Returns <code>true</code> if this transform can be represented with a …","Check whether shapes on the XY plane with Z pointing …","Returns true if the size is zero, negative or NaN.","Returns true if the size is zero, negative or NaN.","","Returns <code>true</code> if any component of size is zero, negative, …","Returns <code>true</code> if any component of size is zero, negative or …","Returns true if all members are finite.","Returns true if all members are finite.","Returns true if all members are finite.","Returns true if all members are finite.","Returns true if all members are finite.","Returns true if all members are finite.","Returns true if all members are finite.","Returns true if all members are finite.","Returns true if all members are finite.","Returns true if the angle is a finite number.","Returns <code>true</code> if this scale has no effect.","Check if translation does nothing (both x and y is <code>zero()</code>).","Check if translation does nothing (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).","Returns whether it is possible to compute the inverse …","Returns whether it is possible to compute the inverse …","Returns true if the box has a negative area.","Returns true if the box has a negative volume.","Returns <code>true</code> if norm of this quaternion is (approximately) …","Returns <code>true</code> if both components is positive and <code>false</code> any …","Returns <code>true</code> if all components is positive and <code>false</code> any …","Returns <code>true</code> if all side offsets are zero.","Component multiplied by the imaginary number <code>j</code>.","Component multiplied by the imaginary number <code>k</code>.","","Returns the vector length.","Returns the vector length.","Linearly interpolate between this box and another box.","Linearly interpolate between this box3d and another box3d.","Linearly interpolate between this length and another …","Linearly interpolate between this point and another point.","Linearly interpolate between this point and another point.","Linearly interpolate between this rectangle and another …","Basic Linear interpolation between this rotation and …","Linearly interpolate each component between this size and …","Linearly interpolate between this size and another size.","Linearly interpolate each component between this vector …","Linearly interpolate each component between this vector …","Linear interpolation between two angles, using the …","Returns vector with results of “lower then” operation …","Returns vector with results of “lower than” operation …","Returns vector with results of “lower than” operation …","Returns vector with results of “lower than” operation …","","","","","","","","","","","","","","","","","","","","","","","Returns maximum between this length and another length.","","","","Returns the size each component of which are maximum of …","Returns the size each component of which are maximum of …","Returns the vector each component of which are maximum of …","Returns the vector each component of which are maximum of …","","","","","Returns minimum between this length and another length.","","","","Returns the size each component of which are minimum of …","Returns the size each component of which are minimum of …","Returns the vector each component of which are minimum of …","Returns the vector each component of which are minimum of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies all of the transform’s component by a scalar …","","","","","","","","","","Constructor.","Constructor.","Constructor taking scalar values directly.","Associate a value with a unit of measure.","Constructor taking scalar values directly.","Constructor taking scalar values directly.","Constructor.","Creates a rotation from an angle in radians.","","Constructor taking a scalar for each side.","Constructor taking scalar values.","Constructor taking scalar values.","Create a transform specifying its components in using the …","Create a transform specifying all of it’s component as a …","","","Constructor taking scalar values directly.","Constructor taking scalar values directly.","Construct a new rigid transformation, where the <code>rotation</code> …","Create a transform representing a 2d transformation from …","Constructor setting the same value to all sides, taking a …","Construct a new rigid transformation, where the <code>translation</code>…","Returns <code>true</code> if all components are <code>false</code> and <code>false</code> …","Returns <code>true</code> if all components are <code>false</code> and <code>false</code> …","Computes the norm of this quaternion.","Returns a unit quaternion from this one.","Returns the vector with length of one unit.","Returns the vector with length of one unit","Returns new vector with results of negation operation on …","Returns new vector with results of negation operation on …","Returns vector with results of “not equal” operation …","Returns vector with results of “not equal” operation …","Returns vector with results of “not equal” operation …","Returns vector with results of “not equal” operation …","A one-dimensional length, tagged with its units.","","Constructor, setting all components to one.","Constructor, setting all components to one.","Returns new vector with by-component OR operation applied.","Returns new vector with by-component OR operation applied.","Constructor, setting all components to zero.","Constructor, setting all components to zero.","","Create an orthogonal projection transform.","Calculate the b and position of an outer box.","Calculate the size and position of an outer rectangle.","Returns a box that encompasses the result of transforming …","Returns a 2d box that encompasses the result of …","Returns a 3d box that encompasses the result of …","Returns a rectangle that encompasses the result of …","Returns a rectangle that encompasses the result of …","","","","","Create a simple perspective transform, projecting to the …","","Shorthand for <code>Point2D::new(x, y)</code>.","Shorthand for <code>Point3D::new(x, y)</code>.","Returns this angle in the [0..2*PI[ range.","Applies a rotation before self’s transformation and …","Returns a transform with a rotation applied before self’…","Applies a scale before self’s transformation and returns …","Returns a transform with a scale applied before self’s …","Applies a translation before self’s transformation and …","Returns a transform with a translation applied before self…","Returns this vector projected onto another one.","Returns this vector projected onto another one.","Returns a projection of this transform in 2d space.","Creates a rotation around from a quaternion representation.","The real part.","Creates a rotation from an angle in radians.","","","","Shorthand for …","Returns a reflection vector using an incident ray and a …","Returns a reflection vector using an incident ray and a …","","Return the normalized vector even if the length is larger …","Return the normalized vector even if the length is larger …","Returns a rotation transform.","Create a 3d rotation transform from an angle / axis. The …","","Return a box with edges rounded to integer coordinates, …","Return a box3d with edges rounded to integer coordinates, …","Rounds each component to the nearest integer value.","See Point2D::round()","See Point3D::round()","Rounds each component to the nearest integer value.","Return a rectangle with edges rounded to integer …","See <code>Size2D::round()</code>.","Rounds each component to the nearest integer value.","See <code>Size3D::round()</code>.","Rounds each component to the nearest integer value.","See <code>Vector2D::round()</code>","Rounds each component to the nearest integer value.","See <code>Vector3D::round()</code>","Rounds each component to the nearest integer value.","Return a box with faces/edges rounded to integer …","Return a box3d with faces/edges rounded to integer …","Return a rectangle with edges rounded to integer …","Return a box with faces/edges rounded to integer …","Return a box3d with faces/edges rounded to integer …","Return a rectangle with edges rounded to integer …","","","","","","Create a 2d scale transform:","Create a 3d scale transform:","Returns point, each component of which or from <code>a</code>, or from <code>b</code>…","Returns point, each component of which or from <code>a</code>, or from <code>b</code>…","Returns size, each component of which or from <code>a</code>, or from <code>b</code> …","Returns size, each component of which or from <code>a</code>, or from <code>b</code> …","Returns vector, each component of which or from <code>a</code>, or from …","Returns vector, each component of which or from <code>a</code>, or from …","Change the size of the box by adjusting the max endpoint …","Returns this angle in the ]-PI..PI] range.","","Returns (sin(self), cos(self)).","","","","Shorthand for <code>Size2D::new(w, h)</code>.","Shorthand for <code>Size3D::new(w, h, d)</code>.","Create a 2d skew transform.","Spherical linear interpolation between this rotation and …","Constructor setting all components to the same value.","Constructor setting all components to the same value.","Constructor setting all components to the same value.","Constructor setting all components to the same value.","","","Constructor setting all components to the same value.","Constructor setting all components to the same value.","Returns the vector’s length squared.","Returns the vector’s length squared.","Computes the squared norm of this quaternion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a rotation representing the other rotation …","Returns a rotation representing this rotation followed by …","Returns the multiplication of the two matrices such that …","Returns the multiplication of the two matrices such that …","Returns the multiplication of the two transforms such that …","Applies a rotation after self’s transformation and …","Returns a transform with a rotation applied after self’s …","Applies a scale after self’s transformation and returns …","Returns a transform with a scale applied after self’s …","Applies a translation after self’s transformation and …","Returns a transform with a translation applied after self…","Convert into a 2d point.","Create a 2D transform picking the relevant terms from this …","Convert into a 2d vector.","Convert into a 3d point with z-coordinate equals to zero.","Creates a 3d rotation (around the z axis) from this 2d …","Create a 3D transform from the current transform","Convert into a 3d vector with <code>z</code> coordinate equals to …","Cast into an array with x and y.","Cast into an array with x, y and z.","Return this size as an array of two elements (width, then …","Return this size as an array of three elements (width, …","Returns an array containing this transform’s terms.","Returns an array containing this transform’s terms.","Cast into an array with x and y.","Cast into an array with x, y and z.","Cast into an array with x and y.","Cast into an array with x, y and z.","","Cast into an array with x, y, z and 0.","Returns an array containing this transform’s terms …","Returns an array containing this transform’s terms …","Equivalent to <code>to_array</code> with elements packed two at a time …","Equivalent to <code>to_array</code> with elements packed four at a time …","Equivalent to <code>to_array_transposed</code> with elements packed …","","","Cast into an <code>f32</code> box.","Cast into an <code>f32</code> box3d.","Cast into an <code>f32</code> point.","Cast into an <code>f32</code> point.","Cast into an <code>f32</code> rectangle.","Cast into an <code>f32</code> size.","Cast into an <code>f32</code> size.","Cast into an <code>f32</code> vector.","Cast into an <code>f32</code> vector.","Cast angle to <code>f32</code>.","Cast into an <code>f64</code> box.","Cast into an <code>f64</code> box3d.","Cast into an <code>f64</code> point.","Cast into an <code>f64</code> point.","Cast into an <code>f64</code> rectangle.","Cast into an <code>f64</code> size.","Cast into an <code>f64</code> size.","Cast into an <code>f64</code> vector.","Cast into an <code>f64</code> vector.","Cast angle <code>f64</code>.","Cast into an <code>i32</code> box, truncating decimals if any.","Cast into an <code>i32</code> box3d, truncating decimals if any.","Cast into an i32 point, truncating decimals if any.","Cast into an <code>i32</code> point, truncating decimals if any.","Cast into an <code>i32</code> rectangle, truncating decimals if any.","Cast into an <code>i32</code> size, truncating decimals if any.","Cast into an <code>i32</code> size, truncating decimals if any.","Cast into an i32 vector, truncating decimals if any.","Cast into an <code>i32</code> vector, truncating decimals if any.","Cast into an <code>i64</code> box, truncating decimals if any.","Cast into an <code>i64</code> box3d, truncating decimals if any.","Cast into an i64 point, truncating decimals if any.","Cast into an <code>i64</code> point, truncating decimals if any.","Cast into an <code>i64</code> rectangle, truncating decimals if any.","Cast into an <code>i64</code> size, truncating decimals if any.","Cast into an <code>i64</code> size, truncating decimals if any.","Cast into an i64 vector, truncating decimals if any.","Cast into an <code>i64</code> vector, truncating decimals if any.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cast this vector into a point.","Cast this vector into a point.","Convert into Cartesian 2D point.","Convert into Cartesian 3D point.","","Cast this vector into a size.","Returns the matrix representation of this rotation.","Returns the matrix representation of this rotation.","Returns the matrix representation of this translation.","Returns the matrix representation of this translation.","Creates translation by this vector in vector units.","Creates translation by this vector in vector units","","Cast into a tuple with x and y.","Cast into a tuple with x, y and z.","Return this size as a tuple of two elements (width, then …","Return this size as an array of three elements (width, …","Cast into a tuple with x and y.","Cast into a tuple with x, y and z.","Cast into a tuple with x and y.","Cast into a tuple with x, y and z.","","Cast into a tuple with x, y, z and 0.","Cast into an <code>u32</code> box, truncating decimals if any.","Cast into an <code>u32</code> box3d, truncating decimals if any.","Cast into an <code>u32</code> point, truncating decimals if any.","Cast into an <code>u32</code> point, truncating decimals if any.","Cast into an <code>u32</code> rectangle, truncating decimals if any.","Cast into an <code>u32</code> size, truncating decimals if any.","Cast into an <code>u32</code> size, truncating decimals if any.","Cast into an <code>u32</code> vector, truncating decimals if any.","Cast into an <code>u32</code> vector, truncating decimals if any.","Cast into an <code>u64</code> rectangle, truncating decimals if any.","Cast into an <code>u64</code> size, truncating decimals if any.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Drop the units, preserving only the numeric value.","Cast into an <code>usize</code> box, truncating decimals if any.","Cast into an <code>usize</code> box3d, truncating decimals if any.","Cast into an <code>usize</code> point, truncating decimals if any.","Cast into an <code>usize</code> point, truncating decimals if any.","Cast into an <code>usize</code> rectangle, truncating decimals if any.","Cast into an <code>uint</code> size, truncating decimals if any.","Cast into an <code>uint</code> size, truncating decimals if any.","Cast into an <code>usize</code> vector, truncating decimals if any.","Cast into an <code>usize</code> vector, truncating decimals if any.","Cast this point into a vector.","Cast this point into a vector.","Return this size as a vector with width and height.","Return this size as a vector with width, height and depth.","Cast into a 2D vector.","Cast into a 3D vector.","","Translate a 2D box and cast its unit.","Returns the given box transformed by this scale.","Translate a 2D box and cast its unit.","Returns the given box transformed by this scale.","Translate a 3D box and cast its unit.","Returns the given 2d point transformed by this rotation.","Returns the given point transformed by this scale.","Returns the given point transformed by this transform.","Translate a point and cast its unit.","Returns the given 2d point transformed by this rotation …","Returns the given 2d point transformed by this transform, …","Translate a point and cast its unit.","Returns the homogeneous vector corresponding to the …","Returns the given 3d point transformed by this rotation.","Returns the given point transformed by this scale.","Returns the given 3d point transformed by this transform, …","Translate a point and cast its unit.","Returns the homogeneous vector corresponding to the …","Returns the given rect transformed by this scale.","Translate a rectangle and cast its unit.","Translate a rectangle and cast its unit.","Returns the given vector transformed by this scale.","No-op, just cast the unit.","No-op, just cast the unit.","Returns the given 2d vector transformed by this rotation.","Returns the given vector transformed by this scale.","Returns the given vector transformed by this matrix.","Returns the given 2d vector transformed by this rotation …","Returns the given 2d vector transformed by this matrix.","Returns the given 3d vector transformed by this rotation.","Returns the given 3d vector transformed by this matrix.","Returns the same box, translated by a vector.","Returns the same box3d, translated by a vector.","Returns the same rectangle, translated by a vector.","Create a 2d translation transform:","Create a 3d translation transform:","","Fallible cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Fallible cast from one numeric representation to another, …","Fallible cast from one numeric representation to another.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the vector with length of one unit.","Returns the vector with length of one unit.","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the union of two boxes.","Computes the union of two boxes.","","Creates a rotation around from a quaternion representation …","Convenience constructor.","Convenience constructor.","Returns the vector part (i, j, k) of this quaternion.","","","Returns result of multiplication of all components","","","","","The extent of the element in the <code>U</code> units along the <code>x</code> axis …","The extent of the element in the <code>U</code> units along the <code>x</code> axis.","Returns the same transform with a different destination …","Returns the same transform with a different destination …","Return this vector scaled to fit the provided length.","Return this vector capped to a maximum length.","Return this vector capped to a maximum length.","Return this vector with a minimum length applied.","Return this vector with a minimum length applied.","Returns the same transform with a different source unit.","Returns the same transform with a different source unit.","","","","","","The <code>x</code> (traditionally, horizontal) coordinate.","The <code>x</code> (traditionally, horizontal) coordinate.","","","","","","Returns a 2d point using this point’s x and y coordinates","Returns a 2d vector using this vector’s x and y …","Returns a 2d vector using this vector’s x and y …","","Returns a 2d point using this point’s x and z coordinates","Returns a 2d vector using this vector’s x and z …","Returns a 2d vector using this vector’s x and z …","","","","","","","The <code>y</code> (traditionally, vertical) coordinate.","The <code>y</code> (traditionally, vertical) coordinate.","","","","","","Swap x and y.","Swap x and y.","Returns a 2d point using this point’s x and z coordinates","Returns a 2d vector using this vector’s x and z …","Returns a 2d vector using this vector’s y and z …","","","","","The <code>z</code> (traditionally, depth) coordinate.","","","Constructor, setting all sides to zero.","Constructor, setting all sides to zero.","","The same as <code>origin()</code>.","","The same as <code>origin()</code>.","","Constructor, setting all sides to zero.","Constructor, setting all sides to zero.","The same as <code>Zero::zero()</code> but available without importing …","","The same as <code>Zero::zero()</code> but available without importing …","","Constructor, setting all components to zero.","Constructor, setting all components to zero.","Constructor, setting all components to zero.","Constructor, setting all components to zero.","","Trait for testing approximate equality","Default epsilon value","Returns <code>true</code> is this object is approximately equal to the …","Returns <code>true</code> is this object is approximately equal to the …","","","","","","","","","","","","","","","","","","","","","","","Defines the smallest integer equal or greater than the …","Defines the biggest integer equal or lower than the …","","Defines the nearest integer value to the original value.","","Rounds to the smallest integer equal or greater than the …","Rounds to the biggest integer equal or lower than the …","","Rounds to the nearest integer value.",""],"i":[8,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,5,8,8,9,9,10,10,11,12,2,2,3,3,13,14,4,4,5,5,15,15,8,9,9,10,10,12,2,3,13,14,4,5,15,9,10,17,19,17,19,31,4,4,5,15,17,19,8,9,10,24,22,23,4,5,15,22,23,8,9,10,24,22,22,23,23,4,5,15,0,0,25,27,2,24,24,24,24,25,28,35,8,9,10,27,31,24,11,12,2,3,22,23,13,14,4,5,15,32,17,19,36,25,28,35,8,9,10,27,31,24,11,12,2,3,22,23,13,14,4,5,15,32,17,19,36,12,0,0,0,25,28,8,9,10,27,11,2,3,22,23,4,5,15,25,28,8,9,10,27,31,24,2,3,4,5,32,9,9,10,10,2,2,3,3,4,4,5,5,25,28,27,9,10,2,3,4,5,4,5,25,28,35,8,9,10,27,31,24,11,12,2,3,22,23,13,14,4,5,15,32,17,19,36,25,28,35,8,9,10,27,31,24,11,12,2,3,22,23,13,14,4,5,15,32,17,19,36,8,11,36,4,5,4,5,25,28,27,2,3,25,28,27,70,4,5,32,0,25,28,8,9,10,27,11,12,2,3,22,23,13,14,4,5,15,36,15,70,28,3,22,23,9,10,25,25,28,28,8,8,8,9,9,10,10,27,27,12,12,2,2,3,3,4,4,5,5,15,15,25,25,28,28,8,9,9,10,10,27,27,12,12,2,2,3,3,4,4,5,5,15,4,5,25,28,35,8,9,10,27,31,24,11,12,2,3,22,23,13,14,4,5,15,32,17,19,36,2,3,4,5,24,9,4,70,9,9,10,10,2,2,3,3,4,4,5,5,25,28,35,8,9,10,27,24,11,12,2,3,22,23,13,14,4,5,15,32,17,19,36,15,15,15,25,25,28,28,35,35,35,35,35,8,9,9,9,10,10,10,27,27,31,24,11,12,2,2,2,2,3,3,3,3,22,23,13,13,14,14,4,4,4,4,5,5,5,15,32,32,32,17,19,36,4,22,23,22,23,12,9,10,12,2,3,4,5,25,25,28,27,32,23,25,28,27,32,25,28,9,10,27,31,24,2,3,22,23,13,14,4,5,32,12,12,8,11,15,31,2,3,4,5,25,28,35,8,9,10,27,31,24,11,12,2,3,22,23,13,14,4,5,15,32,17,19,36,25,28,27,2,3,12,24,31,24,11,22,23,13,14,32,25,28,27,25,27,25,28,27,25,28,25,28,27,25,28,35,8,9,9,9,10,10,10,27,31,24,11,12,2,2,2,3,3,3,22,23,13,13,13,14,14,14,4,4,4,5,5,5,15,32,17,19,36,31,24,11,22,23,13,14,32,23,23,25,28,27,2,3,25,28,9,10,27,2,3,4,5,15,11,13,14,22,23,25,28,24,2,3,12,24,24,12,4,5,25,28,8,9,10,27,24,2,3,4,5,15,2,3,4,5,22,23,22,23,23,23,22,23,22,23,23,23,22,23,22,23,23,23,23,23,23,23,8,9,10,27,2,3,4,5,25,28,27,27,8,9,10,27,2,3,4,5,25,28,27,27,25,25,28,28,8,8,9,9,10,10,27,27,11,12,12,2,2,3,3,4,4,5,5,15,25,25,28,28,8,9,9,10,10,27,27,12,12,2,2,3,3,4,4,5,5,15,23,8,9,10,12,2,3,4,5,15,25,28,35,8,9,10,27,31,11,12,2,3,22,23,13,14,4,5,32,23,12,32,17,19,24,24,4,5,17,19,2,3,4,5,0,11,4,5,17,19,9,10,27,23,25,27,22,23,23,22,23,8,11,15,36,23,15,0,0,15,22,23,22,23,22,23,4,5,23,24,24,31,15,15,70,0,4,5,12,4,5,22,23,32,25,28,9,9,10,10,27,2,2,3,3,4,4,5,5,25,28,27,25,28,27,8,8,25,28,27,22,23,17,19,17,19,17,19,25,15,70,15,25,28,27,0,0,23,24,9,10,2,3,13,14,4,5,4,5,24,8,9,9,9,10,10,10,11,12,2,3,13,14,4,5,15,8,9,9,10,10,12,2,3,13,14,4,5,15,8,8,2,2,3,3,4,4,5,5,15,15,70,31,24,22,23,32,22,23,22,23,22,23,10,23,5,9,31,22,4,9,10,2,3,22,23,13,14,4,5,10,5,22,23,22,23,23,27,15,25,28,9,10,27,2,3,4,5,15,25,28,9,10,27,2,3,4,5,15,25,28,9,10,27,2,3,4,5,25,28,9,10,27,2,3,4,5,25,28,27,25,28,35,8,9,10,27,31,24,11,12,2,3,22,23,13,14,4,5,15,32,17,19,36,4,5,35,35,25,4,31,24,13,14,4,5,32,9,10,2,3,13,14,4,5,10,5,25,28,9,10,27,2,3,4,5,27,2,25,28,9,10,27,31,24,2,3,22,23,13,14,4,5,32,25,28,9,10,27,2,3,4,5,9,10,2,3,13,14,12,13,11,14,11,14,31,11,22,13,24,23,14,23,24,11,23,14,23,11,13,14,11,13,14,31,11,22,24,23,24,23,25,28,27,22,23,32,25,28,8,9,10,27,11,2,3,22,23,4,5,15,25,28,35,8,9,10,27,31,24,11,12,2,3,22,23,13,14,4,5,15,32,17,19,36,25,28,35,8,9,10,27,31,24,11,12,2,3,22,23,13,14,4,5,15,32,17,19,36,4,5,15,25,28,35,8,9,10,27,31,24,11,12,2,3,22,23,13,14,4,5,15,32,17,19,36,25,28,27,24,0,0,24,12,28,3,35,25,28,27,2,3,22,23,4,4,5,4,5,22,23,35,9,10,13,14,4,5,17,19,25,28,27,10,5,19,28,10,5,19,28,35,9,10,13,14,4,5,17,19,25,28,27,9,4,10,5,19,28,35,10,14,5,19,28,25,28,8,9,9,10,10,27,12,2,2,3,3,4,4,5,5,15,0,21,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,44,49,55,48],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],[[2,[1]]]],[[[3,[1]]],[[3,[1]]]],[4,4],[5,5],[[[8,[[0,[6,7]]]],[8,[[0,[6,7]]]]]],[[[8,[6]],[8,[6]]]],[[[9,[6]],[4,[6]]]],[[[9,[6]],[2,[6]]]],[[[10,[6]],[5,[6]]]],[[[10,[6]],[3,[6]]]],[[[11,[6]],[11,[6]]]],[[12,12],12],[[[2,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]],[2,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]]],[[2,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]]]],[[[2,[6]],[2,[6]]]],[[[3,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]],[3,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]]],[[3,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]]]],[[[3,[6]],[3,[6]]]],[[[13,[6]],[13,[6]]]],[[[14,[6]],[14,[6]]]],[[[4,[6]],[4,[6]]]],[[[4,[[0,[6,7]]]],[4,[[0,[6,7]]]]]],[[[5,[[0,[6,7]]]],[5,[[0,[6,7]]]]]],[[[5,[6]],[5,[6]]]],[[[15,[[6,[[6,[[6,[6]]]]]]]],[15,[[6,[[6,[[6,[6]]]]]]]]],[[15,[[6,[[6,[[6,[6]]]]]]]]]],[[[15,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]],[15,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]]],[[15,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]]]],[[[8,[16]],[8,[16]]]],[[[9,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]],[4,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]]]],[[[9,[16]],[2,[16]]]],[[[10,[16]],[3,[16]]]],[[[10,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]],[5,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]]]],[[12,12]],[[[2,[16]],[2,[16]]]],[[[3,[16]],[3,[16]]]],[[[13,[16]],[13,[16]]]],[[[14,[16]],[14,[16]]]],[[[4,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]],[4,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]]]],[[[5,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]],[5,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]]]],[[[15,[[16,[[16,[[16,[16]]]]]]]],[15,[[16,[[16,[[16,[16]]]]]]]]]],[[[9,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]],2],[[9,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]]]],[[[10,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]],[3,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]]],[[10,[[0,[7,[6,[[0,[7,[6,[[0,[7,[6,[[0,[7,6]]]]]]]]]]]]]]]]]],[17,18],[19,18],[[17,17],17],[[19,19],19],0,[[[4,[7]]],[[15,[7]]]],[[4,4],15],[[[5,[20]],[5,[20]]],[[15,[20]]]],[[15,15],15],[17,18],[19,18],[[],[[21,[[21,[[21,[[21,[21]]]]]]]]]],[[],[[9,[[21,[[21,[[21,[21]]]]]]]]]],[[],[[10,[[21,[[21,[[21,[21]]]]]]]]]],[[]],[[],[[21,[[21,[[21,[[21,[21]]]]]]]]]],[[],[[21,[[21,[[21,[[21,[21]]]]]]]]]],[[],[[4,[[21,[[21,[[21,[21]]]]]]]]]],[[],[[5,[[21,[[21,[[21,[21]]]]]]]]]],[[],[[21,[[21,[[21,[[21,[21]]]]]]]]]],[[22,22],18],[[[23,[[21,[[21,[[21,[21]]]]]]]],[23,[[21,[[21,[[21,[21]]]]]]]]],18],[[[8,[[21,[[21,[[21,[21]]]]]]]],8],18],[[[9,[[21,[[21,[[21,[21]]]]]]]],[9,[[21,[[21,[[21,[21]]]]]]]],[9,[[21,[[21,[[21,[21]]]]]]]]],18],[[[10,[[21,[[21,[[21,[21]]]]]]]],[10,[[21,[[21,[[21,[21]]]]]]]],[10,[[21,[[21,[[21,[21]]]]]]]]],18],[[24,24],18],[[22,22],18],[[[22,[[21,[[21,[[21,[21]]]]]]]],[22,[[21,[[21,[[21,[21]]]]]]]]],18],[[[23,[[21,[[21,[[21,[21]]]]]]]],[23,[[21,[[21,[[21,[21]]]]]]]]],18],[[[23,[[21,[[21,[[21,[21]]]]]]]],[23,[[21,[[21,[[21,[21]]]]]]]]],18],[[[4,[[21,[[21,[[21,[21]]]]]]]],[4,[[21,[[21,[[21,[21]]]]]]]],[4,[[21,[[21,[[21,[21]]]]]]]]],18],[[[5,[[21,[[21,[[21,[21]]]]]]]],[5,[[21,[[21,[[21,[21]]]]]]]],[5,[[21,[[21,[[21,[21]]]]]]]]],18],[[[15,[[21,[[21,[[21,[21]]]]]]]],15],18],0,0,[25],[[[27,[[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,26]]]]]]]]]]]]]]]]],[[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,26]]]]]]]]]]]]]]]]]]]],[[[2,[7]]]],[[5,15],24],[15,24],[15,24],[15,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[7,7,7,7,7,7],[[28,[7]]]],[[18,18],17],[[18,18,18],19],[[[25,[[0,[29,7]]]]],[[25,[29]]]],[[[28,[[0,[29,7]]]]],[[28,[29]]]],[[[8,[[0,[29,30]]]]],[[8,[29]]]],[[[9,[[0,[29,7]]]]],[[9,[29]]]],[[[10,[[0,[29,7]]]]],[[10,[29]]]],[[[27,[[0,[29,7]]]]],[[27,[29]]]],[[[11,[29]]],[[11,[29]]]],[[[2,[[0,[29,7]]]]],[[2,[29]]]],[[[3,[[0,[29,7]]]]],[[3,[29]]]],[[[22,[[0,[29,7]]]]],[[22,[29]]]],[[[23,[[0,[29,7]]]]],[[23,[29]]]],[[[4,[[0,[29,7]]]]],[[4,[29]]]],[[[5,[[0,[29,7]]]]],[[5,[29]]]],[15,[[15,[29]]]],[25,25],[28,28],[[[8,[30]]],[[8,[30]]]],[[[9,[7]]],[[9,[7]]]],[[[10,[7]]],[[10,[7]]]],[[[27,[7]]],[[27,[7]]]],[[[31,[7]]],[[31,[7]]]],[24,24],[[[2,[7]]],[[2,[7]]]],[[[3,[7]]],[[3,[7]]]],[[[4,[7]]],[[4,[7]]]],[[[5,[7]]],[[5,[7]]]],[[[32,[7]]],[[32,[7]]]],[[[9,[7]]],[[9,[7]]]],[[[9,[33]]],[[9,[33]]]],[[[10,[7]]],[[10,[7]]]],[[[10,[33]]],[[10,[33]]]],[[[2,[33]]],[[2,[33]]]],[[[2,[7]]],[[2,[7]]]],[[[3,[7]]],[[3,[7]]]],[[[3,[33]]],[[3,[33]]]],[[[4,[7]]],[[4,[7]]]],[[[4,[33]]],[[4,[33]]]],[[[5,[33]]],[[5,[33]]]],[[[5,[7]]],[[5,[7]]]],[25,9],[28,10],[27,9],[[[9,[34]],[9,[34]],[9,[34]]],[[9,[34]]]],[[[10,[34]],[10,[34]],[10,[34]]],[[10,[34]]]],[[[2,[34]],[2,[34]],[2,[34]]],[[2,[34]]]],[[[3,[34]],[3,[34]],[3,[34]]],[[3,[34]]]],[[[4,[34]],[4,[34]],[4,[34]]],[[4,[34]]]],[[[5,[34]],[5,[34]],[5,[34]]],[[5,[34]]]],[[[4,[20]],20,20],[[4,[20]]]],[[[5,[20]],20,20],[[5,[20]]]],[[[25,[30]]],[[25,[30]]]],[[[28,[30]]],[[28,[30]]]],[[[35,[30]]],[[35,[30]]]],[[[8,[30]]],[[8,[30]]]],[[[9,[30]]],[[9,[30]]]],[[[10,[30]]],[[10,[30]]]],[[[27,[30]]],[[27,[30]]]],[[[31,[30]]],[[31,[30]]]],[[[24,[30]]],[[24,[30]]]],[[[11,[30]]],[[11,[30]]]],[[[12,[30]]],[[12,[30]]]],[[[2,[30]]],[[2,[30]]]],[[[3,[30]]],[[3,[30]]]],[[[22,[30]]],[[22,[30]]]],[[[23,[30]]],[[23,[30]]]],[[[13,[30]]],[[13,[30]]]],[[[14,[30]]],[[14,[30]]]],[[[4,[30]]],[[4,[30]]]],[[[5,[30]]],[[5,[30]]]],[[[15,[30]]],[[15,[30]]]],[[[32,[30]]],[[32,[30]]]],[17,17],[19,19],[36,36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[37]],[8,[37]]],38],[[[11,[37]],[11,[37]]],38],[[36,36],38],[[4,4],4],[[[5,[7]],[5,[7]]],[[5,[7]]]],[[4,4],4],[[[5,[7]],[5,[7]]],[[5,[7]]]],[[25,9],18],[[28,10],18],[[27,9],18],[[[2,[34]],[2,[34]]],18],[[[3,[34]],[3,[34]]],18],[[25,25],18],[[28,28],18],[[27,27],18],[[]],[[4,4]],[[[5,[7]],[5,[7]]],[[5,[7]]]],[[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]]],0,[[],[[25,[39]]]],[[],[[28,[39]]]],[[],[[8,[39]]]],[[],[[9,[39]]]],[[],[[10,[39]]]],[[],[[27,[39]]]],[[],[[11,[39]]]],[[],[[12,[39]]]],[[],[[2,[39]]]],[[],[[3,[39]]]],[[],22],[[],23],[[],13],[[],14],[[],[[4,[39]]]],[[],[[5,[39]]]],[[],[[15,[39]]]],[[],36],[[],15],[[]],[28],0,[22],[23],[[[9,[[0,[20,[40,[[0,[20,[40,[[0,[20,[40,[[0,[20,40]]]]]]]]]]]]]]]],[9,[[0,[20,[40,[[0,[20,[40,[[0,[20,[40,[[0,[20,40]]]]]]]]]]]]]]]]],[[0,[20,[40,[[0,[20,[40,[[0,[20,[40,[[0,[20,[40,[[0,[20,40]]]]]]]]]]]]]]]]]]]],[[[10,[[0,[20,[40,[[0,[20,[40,[[0,[20,[40,[[0,[20,40]]]]]]]]]]]]]]]],[10,[[0,[20,[40,[[0,[20,[40,[[0,[20,[40,[[0,[20,40]]]]]]]]]]]]]]]]],[[0,[20,[40,[[0,[20,[40,[[0,[20,[40,[[0,[20,[40,[[0,[20,40]]]]]]]]]]]]]]]]]]]],[[[25,[[0,[7,41]]]],[11,[[0,[7,41]]]]]],[[[25,[[0,[7,41]]]],[0,[7,41]]]],[[[28,[[0,[7,41]]]],[11,[[0,[7,41]]]]]],[[[28,[[0,[7,41]]]],[0,[7,41]]]],[[[8,[41]],[11,[41]]]],[[[8,[41]],41]],[[[8,[41]],[8,[41]]]],[[[9,[[0,[7,41]]]],[0,[7,41]]]],[[[9,[[0,[7,41]]]],[11,[[0,[7,41]]]]]],[[[10,[[0,[7,41]]]],[0,[7,41]]]],[[[10,[[0,[7,41]]]],[11,[[0,[7,41]]]]]],[[[27,[[0,[7,41]]]],[0,[7,41]]]],[[[27,[[0,[7,41]]]],[11,[[0,[7,41]]]]]],[[[12,[[0,[7,41]]]],[0,[7,41]]]],[[[12,[[0,[7,41]]]],[11,[[0,[7,41]]]]]],[[[2,[[0,[7,41]]]],[0,[7,41]]]],[[[2,[[0,[7,41]]]],[11,[[0,[7,41]]]]]],[[[3,[[0,[7,41]]]],[0,[7,41]]]],[[[3,[[0,[7,41]]]],[11,[[0,[7,41]]]]]],[[[4,[[0,[7,41]]]],[11,[[0,[7,41]]]]]],[[[4,[[0,[7,41]]]],[0,[7,41]]]],[[[5,[[0,[7,41]]]],[11,[[0,[7,41]]]]]],[[[5,[[0,[7,41]]]],[0,[7,41]]]],[[[15,[[41,[[41,[[41,[41]]]]]]]],[15,[[41,[[41,[[41,[41]]]]]]]]],[[41,[[41,[[41,[[41,[41]]]]]]]]]],[[[15,[[41,[[41,[[41,[41]]]]]]]],[41,[[41,[[41,[[41,[41]]]]]]]]],[[15,[[41,[[41,[[41,[41]]]]]]]]]],[[[25,[[0,[7,42]]]],[11,[[0,[7,42]]]]]],[[[25,[[0,[7,42]]]],[0,[7,42]]]],[[[28,[[0,[7,42]]]],[11,[[0,[7,42]]]]]],[[[28,[[0,[7,42]]]],[0,[7,42]]]],[[[8,[[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,41]]]]]]]]]]]]]]]],[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,41]]]]]]]]]]]]]]]]]]]],[[[9,[[0,[7,42]]]],[11,[[0,[7,42]]]]]],[[[9,[[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,41]]]]]]]]]]]]]]]],[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,41]]]]]]]]]]]]]]]]]]]],[[[10,[[0,[7,42]]]],[0,[7,42]]]],[[[10,[[0,[7,42]]]],[11,[[0,[7,42]]]]]],[[[27,[[0,[7,42]]]],[0,[7,42]]]],[[[27,[[0,[7,42]]]],[11,[[0,[7,42]]]]]],[[[12,[[0,[7,42]]]],[0,[7,42]]]],[[[12,[[0,[7,42]]]],[11,[[0,[7,42]]]]]],[[[2,[[0,[7,42]]]],[0,[7,42]]]],[[[2,[[0,[7,42]]]],[11,[[0,[7,42]]]]]],[[[3,[[0,[7,42]]]],[0,[7,42]]]],[[[3,[[0,[7,42]]]],[11,[[0,[7,42]]]]]],[[[4,[[0,[7,42]]]],[11,[[0,[7,42]]]]]],[[[4,[[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,41]]]]]]]]]]]]]]]],[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,41]]]]]]]]]]]]]]]]]]]],[[[5,[[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,41]]]]]]]]]]]]]]]],[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,41]]]]]]]]]]]]]]]]]]]],[[[5,[[0,[7,42]]]],[11,[[0,[7,42]]]]]],[[[15,[[42,[[42,[[42,[42]]]]]]]],[42,[[42,[[42,[[42,[42]]]]]]]]]],[[4,4]],[[5,5]],[[[25,[43]],[25,[43]]],18],[[[28,[43]],[28,[43]]],18],[[35,35],18],[[[8,[43]],[8,[43]]],18],[[9,9],18],[[10,10],18],[[[27,[43]],[27,[43]]],18],[[31,31],18],[[24,24],18],[[[11,[43]],11],18],[[12,12],18],[[2,2],18],[[3,3],18],[[22,22],18],[[23,23],18],[[13,13],18],[[14,14],18],[[[4,[43]],[4,[43]]],18],[[[5,[43]],[5,[43]]],18],[[[15,[43]],15],18],[[[32,[43,43,43]],32],18],[[17,17],18],[[19,19],18],[[36,36],18],[[[2,[43]],[2,[43]]],17],[[[3,[43]],[3,[43]]],19],[[[4,[43]],[4,[43]]],17],[[[5,[43]],[5,[43]]],19],[[15,15,15],24],[[[9,[7]],7],[[10,[7]]]],[[[4,[7]],7],[[5,[7]]]],[[]],[[[9,[44]]],[[9,[44]]]],[[[9,[7]]],[[9,[7]]]],[[[10,[44]]],[[10,[44]]]],[[[10,[7]]],[[10,[7]]]],[[[2,[7]]],[[2,[7]]]],[[[2,[44]]],[[2,[44]]]],[[[3,[7]]],[[3,[7]]]],[[[3,[44]]],[[3,[44]]]],[[[4,[7]]],[[4,[7]]]],[[[4,[44]]],[[4,[44]]]],[[[5,[44]]],[[5,[44]]]],[[[5,[7]]],[[5,[7]]]],[[[25,[45]],46],47],[[[28,[45]],46],47],[[[35,[45]],46],47],[[[8,[45]],46],47],[[[9,[45]],46],47],[[[10,[45]],46],47],[[[27,[45]],46],47],[[[24,[45]],46],47],[[[11,[45]],46],47],[[[12,[45]],46],47],[[[2,[45]],46],47],[[[3,[45]],46],47],[[22,46],47],[[23,46],47],[[[13,[45]],46],47],[[[14,[45]],46],47],[[[4,[45]],46],47],[[[5,[45]],46],47],[[[15,[45]],46],47],[[[32,[45,45,45]],46],47],[[17,46],47],[[19,46],47],[[36,46],47],[[],15],[[],15],[[],15],[2,25],[[]],[3,28],[[]],[[[5,[48]]],[[35,[48]]]],[[[10,[49]]],[[35,[49]]]],[[]],[[[9,[[0,[48,49]]]]],[[35,[[0,[48,49]]]]]],[[[4,[48]]],[[35,[48]]]],[[]],[[],9],[[],9],[[]],[[],10],[[],10],[[]],[[]],[2,27],[[]],[[]],[[]],[[]],[[],2],[4,2],[[],2],[[]],[[]],[[],3],[[],3],[5,3],[[]],[[]],[[]],[4,13],[[]],[5,14],[[],4],[[],4],[2,4],[[]],[[],5],[[]],[[],5],[[]],[[[24,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]],[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]]],[[]],[[[5,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]],[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]]],[[]],[[]],[[]],[15,4],[[],[[22,[7]]]],[[],[[23,[7]]]],[[],[[22,[7]]]],[[],[[23,[7]]]],[8,12],[[8,8],9],[[8,8,8],10],[[8,8,8,8],12],[[8,8],2],[[8,8,8],3],[[8,8],4],[[8,8,8],5],[[9,2],25],[[],25],[[],28],[[],27],[[[24,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]],[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]]],[11,23],[2,25],[3,28],[2,27],[[[5,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]],[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]]],[25,25],[28,28],[[[9,[36]]],9],[[[10,[36]]],10],[27,[[27,[7]]]],[31,[[31,[7]]]],[24,24],[[[2,[36]]],2],[[[3,[36]]],3],[22,[[22,[7]]]],[23,[[23,[7]]]],[13,[[13,[7]]]],[14,[[14,[7]]]],[[[4,[36]]],4],[[[5,[36]]],5],[32,[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]]],[[4,4],12],[[4,4],12],[[[8,[30]]],30],[11],[15],[31,15],[[[2,[34]],[2,[34]]],17],[[[3,[34]],[3,[34]]],19],[[[4,[34]],[4,[34]]],17],[[[5,[34]],[5,[34]]],19],[[[25,[50]]]],[[[28,[50]]]],[35],[[[8,[50]]]],[9],[10],[[[27,[50]]]],[31],[24],[[[11,[50]]]],[12],[2],[3],[22],[23],[13],[14],[[[4,[50]]]],[[[5,[50]]]],[[[15,[50]]]],[[[32,[50,50,50]]]],[17],[19],[36],[25],[28],[27],0,0,[12],0,[[],31],[[],24],[[],11],[[],22],[[],23],[[],13],[[],14],[[],[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]]],[25,25],[28,28],[27,27],[[25,12],25],[[27,12],27],[[25,25],[[51,[25]]]],[[28,28],[[51,[28]]]],[[27,27],[[51,[27]]]],[[25,25],25],[[28,28],28],[[25,25],18],[[28,28],18],[[27,27],18],[[]],[[]],[[]],[[]],[9],[9],[[]],[[]],[10],[10],[[]],[[]],[[]],[[]],[[]],[2],[2],[[]],[[]],[3],[3],[[]],[[]],[13,22],[[]],[13,4],[[]],[14,5],[14,23],[4],[[]],[4],[[]],[5],[5],[[]],[[]],[[]],[[]],[[]],[[[31,[20]]],[[31,[20]]]],[24,24],[11,11],[22,[[51,[22]]]],[23,[[51,[23]]]],[[[13,[7]]],13],[[[14,[7]]],14],[[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]],[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]]],[23,18],[23,18],[25,18],[28,18],[[[27,[[0,[7,48,34]]]]],18],[[[2,[34]]],18],[[[3,[34]]],18],[[[25,[52]]],18],[[[28,[52]]],18],[[[9,[52]]],18],[[[10,[52]]],18],[[[27,[52]]],18],[[[2,[52]]],18],[[[3,[52]]],18],[[[4,[52]]],18],[[[5,[52]]],18],[15,18],[11,18],[13,18],[14,18],[22,18],[23,18],[25,18],[28,18],[24,18],[[[2,[1]]],18],[[[3,[1]]],18],[12,18],0,0,0,[[[4,[20]]],20],[[[5,[20]]],20],[[25,25],25],[[28,28],28],[[[8,[30]],[8,[30]],30],[[8,[30]]]],[[[9,[7]],[9,[7]],7],[[9,[7]]]],[[[10,[7]],[10,[7]],7],[[10,[7]]]],[[27,27],27],[[24,24],24],[[[2,[7]],[2,[7]],7],[[2,[7]]]],[[[3,[7]],[3,[7]],7],[[3,[7]]]],[[4,4],4],[[5,5],5],[[15,15],15],[[[2,[34]],[2,[34]]],17],[[[3,[34]],[3,[34]]],19],[[[4,[34]],[4,[34]]],17],[[[5,[34]],[5,[34]]],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[8,[34]],[8,[34]]],[[8,[34]]]],[[[9,[34]],[9,[34]]],[[9,[34]]]],[[[10,[34]],[10,[34]]],[[10,[34]]]],[27,9],[[[2,[34]],[2,[34]]],[[2,[34]]]],[[[3,[34]],[3,[34]]],[[3,[34]]]],[[[4,[34]],[4,[34]]],[[4,[34]]]],[[[5,[34]],[5,[34]]],[[5,[34]]]],0,0,[27],[27],[[[8,[34]],[8,[34]]],[[8,[34]]]],[[[9,[34]],[9,[34]]],[[9,[34]]]],[[[10,[34]],[10,[34]]],[[10,[34]]]],[27,9],[[[2,[34]],[2,[34]]],[[2,[34]]]],[[[3,[34]],[3,[34]]],[[3,[34]]]],[[[4,[34]],[4,[34]]],[[4,[34]]]],[[[5,[34]],[5,[34]]],[[5,[34]]]],0,0,[27],[27],[[[25,[[0,[7,26]]]],[11,[[0,[7,26]]]]]],[[[25,[[0,[7,26]]]],[0,[7,26]]]],[[[28,[[0,[7,26]]]],[11,[[0,[7,26]]]]]],[[[28,[[0,[7,26]]]],[0,[7,26]]]],[[[8,[26]],26]],[[[8,[26]],[11,[26]]]],[[[9,[[0,[7,26]]]],[11,[[0,[7,26]]]]]],[[[9,[[0,[7,26]]]],[0,[7,26]]]],[[[10,[[0,[7,26]]]],[0,[7,26]]]],[[[10,[[0,[7,26]]]],[11,[[0,[7,26]]]]]],[[[27,[[0,[7,26]]]],[0,[7,26]]]],[[[27,[[0,[7,26]]]],[11,[[0,[7,26]]]]]],[[[11,[26]],[11,[26]]]],[[[12,[[0,[7,26]]]],[11,[[0,[7,26]]]]]],[[[12,[[0,[7,26]]]],[0,[7,26]]]],[[[2,[[0,[7,26]]]],[0,[7,26]]]],[[[2,[[0,[7,26]]]],[11,[[0,[7,26]]]]]],[[[3,[[0,[7,26]]]],[11,[[0,[7,26]]]]]],[[[3,[[0,[7,26]]]],[0,[7,26]]]],[[[4,[[0,[7,26]]]],[0,[7,26]]]],[[[4,[[0,[7,26]]]],[11,[[0,[7,26]]]]]],[[[5,[[0,[7,26]]]],[11,[[0,[7,26]]]]]],[[[5,[[0,[7,26]]]],[0,[7,26]]]],[[[15,[[26,[[26,[[26,[26]]]]]]]],[26,[[26,[[26,[[26,[26]]]]]]]]],[[15,[[26,[[26,[[26,[26]]]]]]]]]],[[[25,[[0,[7,53]]]],[11,[[0,[7,53]]]]]],[[[25,[[0,[7,53]]]],[0,[7,53]]]],[[[28,[[0,[7,53]]]],[0,[7,53]]]],[[[28,[[0,[7,53]]]],[11,[[0,[7,53]]]]]],[[[8,[[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,26]]]]]]]]]]]]]]]],[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,26]]]]]]]]]]]]]]]]]]]],[[[9,[[0,[7,53]]]],[11,[[0,[7,53]]]]]],[[[9,[[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,26]]]]]]]]]]]]]]]],[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,26]]]]]]]]]]]]]]]]]]]],[[[10,[[0,[7,53]]]],[0,[7,53]]]],[[[10,[[0,[7,53]]]],[11,[[0,[7,53]]]]]],[[[27,[[0,[7,53]]]],[0,[7,53]]]],[[[27,[[0,[7,53]]]],[11,[[0,[7,53]]]]]],[[[12,[[0,[7,53]]]],[0,[7,53]]]],[[[12,[[0,[7,53]]]],[11,[[0,[7,53]]]]]],[[[2,[[0,[7,53]]]],[0,[7,53]]]],[[[2,[[0,[7,53]]]],[11,[[0,[7,53]]]]]],[[[3,[[0,[7,53]]]],[11,[[0,[7,53]]]]]],[[[3,[[0,[7,53]]]],[0,[7,53]]]],[[[4,[[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,26]]]]]]]]]]]]]]]],[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,26]]]]]]]]]]]]]]]]]]]],[[[4,[[0,[7,53]]]],[11,[[0,[7,53]]]]]],[[[5,[[0,[7,53]]]],[11,[[0,[7,53]]]]]],[[[5,[[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,26]]]]]]]]]]]]]]]],[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,[26,[[0,[7,26]]]]]]]]]]]]]]]]]]]],[[[15,[[53,[[53,[[53,[53]]]]]]]],[53,[[53,[[53,[[53,[53]]]]]]]]]],[23,23],[[[8,[54]]]],[[[9,[54]]]],[[[10,[54]]]],[12,12],[[[2,[54]]]],[[[3,[54]]]],[[[4,[54]]]],[[[5,[54]]]],[[[15,[54]]],[[15,[54]]]],[[9,9],25],[[10,10],28],[[],35],[[],8],[[],9],[[],10],[[9,2],27],[15,31],[[],11],[[],12],[[],2],[[],3],[[],22],[[],23],[[],13],[[],14],[[],4],[[],5],[[24,5],32],[[],23],[[],12],[[[5,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]],[24,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]],[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]]],[17,18],[19,18],[24],[24,24],[[[4,[20]]],[[4,[20]]]],[[[5,[20]]],[[5,[20]]]],[17,17],[19,19],[[[2,[43]],[2,[43]]],17],[[[3,[43]],[3,[43]]],19],[[[4,[43]],[4,[43]]],17],[[[5,[43]],[5,[43]]],19],0,[[],[[11,[49]]]],[[],4],[[],5],[[17,17],17],[[19,19],19],[[],9],[[],10],0,[[],23],[[25,12],25],[[27,12],27],[[22,25],25],[[23,25],[[51,[25]]]],[[23,28],[[51,[28]]]],[[22,27],27],[[23,27],[[51,[27]]]],[[[8,[34]],[8,[34]]],[[51,[38]]]],[[[11,[34]],[11,[34]]],[[51,[38]]]],[[[15,[34]],15],[[51,[38]]]],[[36,36],[[51,[38]]]],[[],23],[[],15],[[],9],[[],10],[15,15],[[22,15],22],[[23,15],23],[22,22],[23,23],[[22,4],22],[[23,5],23],[[4,4],4],[[5,5],5],[23,23],[[],24],0,[[],31],[[],15],0,[[]],[[],27],[[4,4],4],[[5,5],5],0,[[[4,[52]]],[[4,[52]]]],[[[5,[52]]],[[5,[52]]]],[15,22],[15,23],0,[25,25],[28,28],[[[9,[7]]],[[9,[7]]]],[[[9,[55]]],[[9,[55]]]],[[[10,[55]]],[[10,[55]]]],[[[10,[7]]],[[10,[7]]]],[[[27,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]]]]]]]]]]],[[27,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]]]]]]]]]]]],[[[2,[55]]],[[2,[55]]]],[[[2,[7]]],[[2,[7]]]],[[[3,[55]]],[[3,[55]]]],[[[3,[7]]],[[3,[7]]]],[[[4,[55]]],[[4,[55]]]],[[[4,[7]]],[[4,[7]]]],[[[5,[55]]],[[5,[55]]]],[[[5,[7]]],[[5,[7]]]],[25,25],[28,28],[[[27,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]]]]]]]]]]],[[27,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]]]]]]]]]]]],[25,25],[28,28],[[[27,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]]]]]]]]]]],[[27,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]],[40,[[0,[44,33,55,[6,[[0,[44,33,55,6,40]]]],[40,[[0,[44,33,55,6,40]]]]]]]]]]]]]]]]]],[[[8,[56]],[8,[56]]],[[8,[56]]]],[[[8,[56]],[8,[56]]],[[8,[56]]]],[[25,7,7],25],[[28,7,7,7],28],[[27,7,7],27],[[],22],[[],23],[[17,9,9],9],[[19,10,10],10],[[17,2,2],2],[[19,3,3],3],[[17,4,4],4],[[19,5,5],5],[[25,2]],[15,15],[[]],[15],[25,2],[28,3],0,[[],2],[[],3],[[15,15],23],[[24,24],24],[[],9],[[],10],[[],2],[[],3],[[],13],[[],14],[[],4],[[],5],[4],[5],[24],[[[8,[40]],[8,[40]]]],[[[9,[40]],[9,[40]]]],[[[9,[40]],[4,[40]]]],[[[9,[40]],[2,[40]]]],[[[10,[40]],[3,[40]]]],[[[10,[40]],[10,[40]]]],[[[10,[40]],[5,[40]]]],[[[11,[40]],[11,[40]]]],[[12,12],12],[[[2,[40]],[2,[40]]]],[[[3,[40]],[3,[40]]]],[[[13,[40]],[13,[40]]]],[[[14,[40]],[14,[40]]]],[[[4,[40]],[4,[40]]]],[[[5,[40]],[5,[40]]]],[[[15,[[40,[[40,[[40,[40]]]]]]]],[15,[[40,[[40,[[40,[40]]]]]]]]]],[[[8,[57]],[8,[57]]]],[[[9,[57]],[2,[57]]]],[[[9,[[0,[7,[40,[[0,[7,[40,[[0,[7,[40,[[0,[7,40]]]]]]]]]]]]]]]],[4,[[0,[7,[40,[[0,[7,[40,[[0,[7,[40,[[0,[7,40]]]]]]]]]]]]]]]]]],[[[10,[57]],[3,[57]]]],[[[10,[[0,[7,[40,[[0,[7,[40,[[0,[7,[40,[[0,[7,40]]]]]]]]]]]]]]]],[5,[[0,[7,[40,[[0,[7,[40,[[0,[7,[40,[[0,[7,40]]]]]]]]]]]]]]]]]],[[12,12]],[[[2,[57]],[2,[57]]]],[[[3,[57]],[3,[57]]]],[[[13,[57]],[13,[57]]]],[[[14,[57]],[14,[57]]]],[[[4,[[0,[7,[40,[[0,[7,[40,[[0,[7,[40,[[0,[7,40]]]]]]]]]]]]]]]],[4,[[0,[7,[40,[[0,[7,[40,[[0,[7,[40,[[0,[7,40]]]]]]]]]]]]]]]]]],[[[5,[[0,[7,[40,[[0,[7,[40,[[0,[7,[40,[[0,[7,40]]]]]]]]]]]]]]]],[5,[[0,[7,[40,[[0,[7,[40,[[0,[7,[40,[[0,[7,40]]]]]]]]]]]]]]]]]],[[[15,[[57,[[57,[[57,[57]]]]]]]],[15,[[57,[[57,[[57,[57]]]]]]]]]],[58,[[8,[[0,[6,48]]]]]],[58,[[8,[[0,[6,7,48]]]]]],[58,[[2,[[0,[6,48]]]]]],[58,[[2,[[0,[6,7,48]]]]]],[58,[[3,[[0,[6,7,48]]]]]],[58,[[3,[[0,[6,48]]]]]],[58,[[4,[[0,[6,48]]]]]],[58,[[4,[[0,[6,7,48]]]]]],[58,[[5,[[0,[6,7,48]]]]]],[58,[[5,[[0,[6,48]]]]]],[58,[[15,[[0,[6,59]]]]]],[58,[[15,[[0,[6,7,59]]]]]],[[]],[[[31,[20]],31],[[31,[20]]]],[[24,24],24],[[22,22],22],[[23,23],23],[[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]],32],[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]]],[[22,15],22],[[23,15],23],[22,22],[23,23],[[22,4],22],[[23,5],23],[[[10,[7]]],[[9,[7]]]],[[[23,[7]]],[[22,[7]]]],[[[5,[7]]],[[4,[7]]]],[[[9,[7]]],[[10,[7]]]],[[[31,[20]]],[[24,[20]]]],[[[22,[7]]],[[23,[7]]]],[[[4,[7]]],[[5,[7]]]],[[[9,[7]]]],[[[10,[7]]]],[[[2,[7]]]],[[[3,[7]]]],[[[22,[7]]]],[[[23,[7]]]],[[[13,[7]]]],[[[14,[7]]]],[[[4,[7]]]],[[[5,[7]]]],[[[10,[7]]]],[[[5,[7]]]],[[[22,[7]]]],[[[23,[7]]]],[[[22,[7]]]],[[[23,[7]]]],[[[23,[7]]]],[27,25],[15],[[[25,[[0,[29,7]]]]],[[25,[60]]]],[[[28,[[0,[29,7]]]]],[[28,[60]]]],[[[9,[[0,[29,7]]]]],[[9,[60]]]],[[[10,[[0,[29,7]]]]],[[10,[60]]]],[[[27,[[0,[29,7]]]]],[[27,[60]]]],[[[2,[[0,[29,7]]]]],[[2,[60]]]],[[[3,[[0,[29,7]]]]],[[3,[60]]]],[[[4,[[0,[29,7]]]]],[[4,[60]]]],[[[5,[[0,[29,7]]]]],[[5,[60]]]],[15,[[15,[60]]]],[[[25,[[0,[29,7]]]]],[[25,[61]]]],[[[28,[[0,[29,7]]]]],[[28,[61]]]],[[[9,[[0,[29,7]]]]],[[9,[61]]]],[[[10,[[0,[29,7]]]]],[[10,[61]]]],[[[27,[[0,[29,7]]]]],[[27,[61]]]],[[[2,[[0,[29,7]]]]],[[2,[61]]]],[[[3,[[0,[29,7]]]]],[[3,[61]]]],[[[4,[[0,[29,7]]]]],[[4,[61]]]],[[[5,[[0,[29,7]]]]],[[5,[61]]]],[15,[[15,[61]]]],[[[25,[[0,[29,7]]]]],[[25,[62]]]],[[[28,[[0,[29,7]]]]],[[28,[62]]]],[[[9,[[0,[29,7]]]]],[[9,[62]]]],[[[10,[[0,[29,7]]]]],[[10,[62]]]],[[[27,[[0,[29,7]]]]],[[27,[62]]]],[[[2,[[0,[29,7]]]]],[[2,[62]]]],[[[3,[[0,[29,7]]]]],[[3,[62]]]],[[[4,[[0,[29,7]]]]],[[4,[62]]]],[[[5,[[0,[29,7]]]]],[[5,[62]]]],[[[25,[[0,[29,7]]]]],[[25,[63]]]],[[[28,[[0,[29,7]]]]],[[28,[63]]]],[[[9,[[0,[29,7]]]]],[[9,[63]]]],[[[10,[[0,[29,7]]]]],[[10,[63]]]],[[[27,[[0,[29,7]]]]],[[27,[63]]]],[[[2,[[0,[29,7]]]]],[[2,[63]]]],[[[3,[[0,[29,7]]]]],[[3,[63]]]],[[[4,[[0,[29,7]]]]],[[4,[63]]]],[[[5,[[0,[29,7]]]]],[[5,[63]]]],[25,[[51,[25]]]],[28,[[51,[28]]]],[[[27,[[0,[7,48,34]]]]],[[51,[[27,[[0,[7,48,34]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[7]]],[[9,[7]]]],[[[5,[7]]],[[10,[7]]]],[[[35,[[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,41,48,34]]]],48,34]]]],48,34]]]],48,34]]]]],[[51,[[9,[[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,41,48,34]]]],48,34]]]],48,34]]]],48,34]]]]]]]],[[[35,[[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,41,48,34]]]],48,34]]]],48,34]]]],48,34]]]]],[[51,[[10,[[0,[7,[41,[[0,[7,[41,[[0,[7,[41,[[0,[7,41,48,34]]]],48,34]]]],48,34]]]],48,34]]]]]]]],[25,27],[[[4,[7]]],[[2,[7]]]],[31,22],[24,23],[[[13,[7]]],[[22,[7]]]],[[[14,[7]]],[[23,[7]]]],[[[4,[7]]],[[22,[7]]]],[[[5,[7]]],[[23,[7]]]],[[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]],[[23,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]]],[[[9,[7]]]],[[[10,[7]]]],[[[2,[7]]]],[[[3,[7]]]],[[[13,[7]]]],[[[14,[7]]]],[[[4,[7]]]],[[[5,[7]]]],[[[10,[7]]]],[[[5,[7]]]],[[[25,[[0,[29,7]]]]],[[25,[64]]]],[[[28,[[0,[29,7]]]]],[[28,[64]]]],[[[9,[[0,[29,7]]]]],[[9,[64]]]],[[[10,[[0,[29,7]]]]],[[10,[64]]]],[[[27,[[0,[29,7]]]]],[[27,[64]]]],[[[2,[[0,[29,7]]]]],[[2,[64]]]],[[[3,[[0,[29,7]]]]],[[3,[64]]]],[[[4,[[0,[29,7]]]]],[[4,[64]]]],[[[5,[[0,[29,7]]]]],[[5,[64]]]],[[[27,[[0,[29,7]]]]],[[27,[65]]]],[[[2,[[0,[29,7]]]]],[[2,[65]]]],[25,[[25,[36]]]],[28,[[28,[36]]]],[[[9,[7]]],[[9,[7,36]]]],[[[10,[7]]],[[10,[7,36]]]],[[[27,[7]]],[[27,[7,36]]]],[[[31,[7]]],[[31,[7,36,36]]]],[24,[[24,[36,36]]]],[[[2,[7]]],[[2,[7,36]]]],[[[3,[7]]],[[3,[7,36]]]],[[[22,[7]]],[[22,[7,36,36]]]],[[[23,[7]]],[[23,[7,36,36]]]],[[[13,[7]]],[[13,[7,36,36]]]],[[[14,[7]]],[[14,[7,36,36]]]],[[[4,[7]]],[[4,[7,36]]]],[[[5,[7]]],[[5,[7,36]]]],[[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]]]]],[[32,[[0,[20,[21,[[0,[20,[21,[[0,[20,[21,[[0,[20,21]]]]]]]]]]]]]],36,36]]]],[[[25,[[0,[29,7]]]]],[[25,[66]]]],[[[28,[[0,[29,7]]]]],[[28,[66]]]],[[[9,[[0,[29,7]]]]],[[9,[66]]]],[[[10,[[0,[29,7]]]]],[[10,[66]]]],[[[27,[[0,[29,7]]]]],[[27,[66]]]],[[[2,[[0,[29,7]]]]],[[2,[66]]]],[[[3,[[0,[29,7]]]]],[[3,[66]]]],[[[4,[[0,[29,7]]]]],[[4,[66]]]],[[[5,[[0,[29,7]]]]],[[5,[66]]]],[[[9,[7]]],[[4,[7]]]],[[[10,[7]]],[[5,[7]]]],[[[2,[7]]],[[4,[7]]]],[[[3,[7]]],[[5,[7]]]],[[[13,[7]]],[[4,[7]]]],[[[14,[7]]],[[5,[7]]]],0,[[[13,[7]],25],25],[[11,25],25],[[[14,[7]],25],25],[[11,28],28],[[[14,[7]],28],28],[[[31,[20]],[9,[20]]],[[9,[20]]]],[[11,9],9],[[22,9],9],[[[13,[7]],[9,[7]]],9],[[24,9],9],[[23,9],[[51,[9]]]],[[[14,[7]],9],9],[[23,9],35],[[24,10],10],[[11,10],10],[[23,10],[[51,[10]]]],[[[14,[7]],10],10],[[23,10],35],[[11,27],27],[[[13,[7]],27],27],[[[14,[7]],27],[[27,[7]]]],[[11,2],2],[[13,2],2],[[14,2],2],[[[31,[20]],[4,[20]]],[[4,[20]]]],[[11,4],4],[[22,4],4],[[24,4],4],[[23,4],4],[[24,5],5],[[23,5],5],[[25,4],25],[[28,5],28],[[27,4],27],[[],22],[[],23],0,[[[25,[[0,[29,7]]]]],[[51,[[25,[29]]]]]],[[[28,[[0,[29,7]]]]],[[51,[[28,[29]]]]]],[[[8,[[0,[29,30]]]]],[[51,[[8,[29]]]]]],[[[9,[[0,[29,7]]]]],[[51,[[9,[29]]]]]],[[[10,[[0,[29,7]]]]],[[51,[[10,[29]]]]]],[[[27,[[0,[29,7]]]]],[[51,[[27,[29]]]]]],[[[11,[29]]],[[51,[[11,[29]]]]]],[[[2,[[0,[29,7]]]]],[[51,[[2,[29]]]]]],[[[3,[[0,[29,7]]]]],[[51,[[3,[29]]]]]],[[[22,[[0,[29,7]]]]],[[51,[[22,[29]]]]]],[[[23,[[0,[29,7]]]]],[[51,[[23,[29]]]]]],[[[4,[[0,[29,7]]]]],[[51,[[4,[29]]]]]],[[[5,[[0,[29,7]]]]],[[51,[[5,[29]]]]]],[15,[[51,[[15,[29]]]]]],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[],67],[[[4,[20]]],[[51,[[4,[20]]]]]],[[[5,[20]]],[[51,[[5,[20]]]]]],[[],15],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[25,25],25],[[28,28],28],[[27,27],27],[[],24],[[],4],[[],5],[24,[[5,[36]]]],[12],[28],[[[3,[7]]],7],0,[25],[28],[27],0,0,[[[22,[7]]],[[22,[7]]]],[[[23,[7]]],[[23,[7]]]],[[[4,[20]],20],[[4,[20]]]],[[[4,[20]],20],[[4,[20]]]],[[[5,[20]],20],[[5,[20]]]],[[[4,[20]],20],[[4,[20]]]],[[[5,[20]],20],[[5,[20]]]],[[[22,[7]]],[[22,[7]]]],[[[23,[7]]],[[23,[7]]]],0,0,0,0,0,0,0,0,0,[25,69],[28,69],[27,69],[[[10,[7]]],[[9,[7]]]],[[[5,[7]]],[[4,[7]]]],[19,17],[28],[[[10,[7]]],[[9,[7]]]],[[[5,[7]]],[[4,[7]]]],[19,17],[28],0,0,0,0,0,0,0,0,0,[25,69],[28,69],[27,69],[[[9,[7]]],[[9,[7]]]],[[[4,[7]]],[[4,[7]]]],[[[10,[7]]],[[9,[7]]]],[[[5,[7]]],[[4,[7]]]],[19,17],[28],0,0,0,0,0,[28,69],[[],25],[[],28],[[],[[8,[48]]]],[[],9],[[],[[9,[48]]]],[[],10],[[],[[10,[48]]]],[[],27],[[],12],[[],2],[[],[[2,[48]]]],[[],3],[[],[[3,[48]]]],[[],[[4,[48]]]],[[],4],[[],5],[[],[[5,[48]]]],[[],15],0,[[]],[[],18],[[],18],[[34,34],34],[[34,34],34],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]]],"p":[[8,"Signed"],[3,"Size2D"],[3,"Size3D"],[3,"Vector2D"],[3,"Vector3D"],[8,"Add"],[8,"Copy"],[3,"Length"],[3,"Point2D"],[3,"Point3D"],[3,"Scale"],[3,"SideOffsets2D"],[3,"Translation2D"],[3,"Translation3D"],[3,"Angle"],[8,"AddAssign"],[3,"BoolVector2D"],[15,"bool"],[3,"BoolVector3D"],[8,"Real"],[8,"ApproxEq"],[3,"Transform2D"],[3,"Transform3D"],[3,"Rotation3D"],[3,"Box2D"],[8,"Mul"],[3,"Rect"],[3,"Box3D"],[8,"NumCast"],[8,"Clone"],[3,"Rotation2D"],[3,"RigidTransform3D"],[8,"Ceil"],[8,"PartialOrd"],[3,"HomogeneousVector"],[3,"UnknownUnit"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"Sub"],[8,"Div"],[8,"DivAssign"],[8,"PartialEq"],[8,"Floor"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Zero"],[8,"One"],[8,"Hash"],[4,"Option"],[8,"Float"],[8,"MulAssign"],[8,"Neg"],[8,"Round"],[8,"Saturating"],[8,"SubAssign"],[8,"Iterator"],[8,"Zero"],[15,"f32"],[15,"f64"],[15,"i32"],[15,"i64"],[15,"u32"],[15,"u64"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"Range"],[8,"Trig"]]},\
"primal":{"doc":"<code>primal</code> puts raw power into prime numbers.","t":[3,3,3,3,11,5,5,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Primes","Sieve","SievePrimes","StreamingSieve","all","as_perfect_power","as_prime_power","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","estimate_nth_prime","estimate_prime_pi","factor","fmt","fmt","fold","fold","from","from","from","from","into","into","into","into","into_iter","into_iter","is_prime","is_prime","new","next","next","nth_prime","nth_prime","prime_pi","prime_pi","primes_from","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upper_bound"],"q":["primal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator over all primes.","A heavily optimised prime sieve.","An iterator over the primes stored in a <code>Sieve</code> instance.","A heavily optimised prime sieve.","The sequence <code>2, 3, 5, 7, 11, ...</code>.","Returns integers <code>(y, k)</code> such that <code>x = y^k</code> with <code>k</code> maximised …","Return <code>Some((p, k))</code> if <code>x = p^k</code> for some prime <code>p</code> and <code>k &gt;= 1</code> …","","","","","","","","","","","Gives estimated bounds for <em>pn</em>, the <code>n</code>th prime number, …","Returns estimated bounds for π(<em>n</em>), the number of primes …","Factorise <code>n</code> into (prime, exponent) pairs.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Test if <code>n</code> is prime, using the deterministic version of the …","Determine if <code>n</code> is a prime number.","Create a new instance, sieving out all the primes up to …","","","Compute <em>pn</em>, the <code>n</code> prime number, 1-indexed (i.e. <em>p1</em> = 2, <em>p2</em> …","Compute <em>pn</em>, the <code>n</code> prime number, 1-indexed (i.e. <em>p1</em> = 2, <em>p2</em> …","Count the number of primes upto and including <code>n</code>, that is, …","Count the number of primes upto and including <code>n</code>.","Return an iterator over the primes from <code>n</code> (inclusive) to …","","","","","","","","","","","","","","Return the largest number that this sieve knows about."],"i":[0,0,0,0,1,0,0,1,10,5,4,1,10,5,4,4,4,0,0,5,10,5,1,4,1,10,5,4,1,10,5,4,1,4,0,5,5,1,4,10,5,10,5,5,4,1,10,5,4,1,10,5,4,1,10,5,4,5],"f":[0,0,0,0,[[],1],[2],[2,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[[]],[2],[2],[[5,6],[[9,[[8,[7]]]]]],[[10,11],[[9,[12]]]],[[5,11],[[9,[12]]]],[1],[4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,13],[[5,6],13],[6,5],[1,[[3,[6]]]],[4,[[3,[6]]]],[6,6],[[5,6],6],[6,6],[[5,6],6],[[5,6],4],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],14],[[],14],[[],14],[[],14],[5,6]],"p":[[3,"Primes"],[15,"u64"],[4,"Option"],[3,"SievePrimes"],[3,"Sieve"],[15,"usize"],[3,"Global"],[3,"Vec"],[4,"Result"],[3,"StreamingSieve"],[3,"Formatter"],[3,"Error"],[15,"bool"],[3,"TypeId"]]},\
"rithmic":{"doc":"Ferris the crab playing the bongos","t":[12,12,13,13,3,24,8,8,3,2,8,8,3,8,8,3,16,16,3,6,6,4,3,3,6,6,8,8,16,8,8,8,8,13,3,3,3,16,16,16,16,16,3,8,8,2,2,2,2,2,11,11,0,23,5,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,10,10,0,11,11,14,14,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,11,10,11,10,11,11,2,11,11,11,11,11,11,10,10,10,10,11,11,23,10,10,5,0,2,10,11,11,11,11,11,11,11,11,10,11,23,10,10,11,11,0,2,2,2,2,11,10,11,11,11,11,11,11,11,11,11,11,10,12,11,10,23,11,11,11,11,11,11,11,11,11,11,10,14,10,11,5,11,11,11,11,11,11,23,11,0,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,0,11,12,12,12,8,3,3,6,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,0,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,8,10,10,10,12,12,12,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,17,17,6,6,17,6,3,17,17,6,6,17,6,17,6,12,0,5,0,0,13,13,3,4,13,13,13,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,17,17,6,2,6,17,6,3,17,2,17,6,6,17,6,17,6,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,8,3,11,11,11,11,14,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","Add","Answer","BVec","CmpByKey","CountInversions","Divisors","FactorialTable","Gameboard","GetSub","IndexCompress","IndexCompressed","Insort","IntBitOps","Ipc","Item","Item","List","MeldHeap","MeldMinHeap","MoStep","NdFenwick","NdVec","OdometerBE","OdometerLE","OptionMerge","OrdPair","Output","PairMut","PrefixSums","PrintMethods","Rangelike","Remove","SegTree","SortedList","SparseTable","T","T","T","T","T","UnionFind","UnwrapAny","Vector2DMore","XorBasis128","XorBasis16","XorBasis32","XorBasis64","XorBasis8","all","any","aug_treap","autofill","binary_search","bit_length","bit_width","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonical","clamp","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","comb","comb_with_rep","components","compress","count_ones","count_zeros","decompress","default","default","deref","divisors","drop","eprint","eprint","eprintln","eprintln","eq","eq","eye","f","f_inv","fill","fill","fill_with","find","first","first","first_one","first_zero","flip","fmt","fmt","fmt","fmt","fmt","format","format","from","from","from","from","from","from","from","from","from","from_indexes","from_iter_iter","from_raw","full","gameboard","get","get","get_mut","get_sub","get_sub_mut","graph","hash","hash","imax","imin","index","index","index","index","index_compress","index_mut","index_mut","input","input_line","insort","into","into","into","into","into","into","into","into","iter","iter_add_one","iter_gosper","iter_gosper_subsets","iter_lsb","iter_msb","iter_mut","iter_ones","iter_ones","iter_subsets","iter_usize","iter_zeros","lagrange_interpolation","last","last","last_one","last_zero","len","len","length2","lsb","mask","masked","mat_mul","mat_vec_mul","memoize","merge","merge_or","mo_algorithm","monoid_ds","monoid_ops","msb","multinomial","new","new","new","new","new","not","not","o_cross","ones","opaque","ordered","pair_mut","perm","perm_with_rep","polynomial","polynomial_add","polynomial_div","polynomial_div_exact","polynomial_mul","pow","prefix_sums","prefix_sums","print","print","println","println","query","raw_vec","replace","resize","roots","rotate_scale","rx","same","same_dir","semitransparent","set","shape","shl","shl","shl_assign","shr","shr","shr_assign","size","size","sort_count_inversions","struct_input","suffix_sums","suffix_sums","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transparent","transposed","triangular_n","triangular_n","triangular_slice","triangular_steps","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","unique_count","unwrap_any","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","xor_basis","zeros","0","0","0","AugFn","AugTreap","Node","OptNode","Range","aug","aug_fn","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contains","default","f","finger","finger_first_false","finger_last_true","from","from","from","from_iter","insert","into","into","into","into_iter","is_empty","iter","join","join3","key","left","left_aug","left_key","left_value","multiunzip","new","new","next","next_back","order_treap","range","remove","remove_all","remove_range","right","right_aug","right_key","right_value","root","split3_by","split3_by_key","split3_by_range","split_by","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","vzip","vzip","vzip","Finger","predecessor","successor","tip","0","0","0","List","OrderAugFn","OrderTreap","Range","SortedList","aug_fn","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contains","contains","count","count","default","default","default","f","from","from","from","from","from","from_iter","from_iter","from_iter","get_at","index","index","insert","insert","insert","insert_left","insert_left","insert_slice","into","into","into","into","into","into_iter","is_empty","is_empty","is_empty","iter","iter","iter","len","len","len","multiunzip","new","new","new","next","next_back","position","position","push_back","push_front","range","range","range_len","range_len","remove","remove","remove","remove_all","remove_all","remove_at","remove_at","remove_range","remove_range","replace","replace_slice","size_hint","split3_at","split_at","to_owned","to_owned","trisect","trisect","trisect_range","trisect_range","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Gameboard","bishop_moves","block","blocked","borrow","borrow_mut","clone","clone_into","diag_jump","dir_jump","dpad4","dpad8","eq","fmt","from","from_vec_vec","h","hash","inbounds","into","is_blocked","knight_jumps","manhat_jumps","new","queen_moves","rook_moves","to_owned","try_from","try_into","type_id","unblock","vzip","w","ACYCLIC","CONNECTED","Dag","DirGraph","FOREST","Forest","Graph","NONE","SIMPLE","SimpDirGraph","SimpUndirGraph","TREE","Tree","UNDIRECTED","UndirGraph","adj","dfs","path_from_pred","prelude","rooted_subtree_fn","BackEdge","CrossEdge","DfsStep","DfsStepKind","ForwardEdge","TreeNodeFinish","TreeNodeStart","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","depth","edge","eq","fmt","fmt","from","from","hash","into","into","kind","p","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","u","vzip","vzip","ACYCLIC","CONNECTED","Dag","DfsStep","DirGraph","FOREST","Forest","Graph","NONE","RsfStep","SIMPLE","SimpDirGraph","SimpUndirGraph","TREE","Tree","UNDIRECTED","UndirGraph","add_edge","adj","bfs_path","borrow","borrow_mut","clone","clone_into","dfs","dfs_up_tree","dfs_up_tree","dijkstra","dijkstra_01","euler_tour","euler_tour","euler_tour_edges","euler_tour_edges","floyd_warshall","fmt","from","from_iter","from_iter_unweighted","into","lca","lca","line","line","new","path_from_pred","rev","rooted_subtree_fn","rooted_subtree_fn","rooted_subtree_fn_half","rooted_subtree_fn_half","size","star","star","subtree_sizes","subtree_sizes","subtree_sizes_rel_to","subtree_sizes_rel_to","tarjan_scc","to_owned","try_from","try_into","type_id","vzip","Leaf","Parent","RsfStep","Sibling","borrow","borrow_mut","from","into","try_from","try_into","type_id","vzip","edge","edge","p","p","p","pp","r","r0","r1","u","NdFenwick","SegTree","borrow","borrow","borrow_mut","borrow_mut","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","build_from","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","from","from_iter","into","into","len","monoid_ops","new","new","prefix","query","query","set","shape","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","vzip","vzip","INVERTIBLE","LAZY","MonoidOps","USumQSum","borrow","borrow_mut","from","into","monoid_ops","operator","operator","operator_identity","operator_inverse","operator_inverse","try_from","try_into","type_id","update","update","update_composition","update_composition","update_distributive","update_distributive","update_identity","vzip","lagrange_interpolation","polynomial_add","polynomial_div","polynomial_div_exact","polynomial_mul","triangular_n","triangular_slice","triangular_steps","XorBasis128","XorBasis16","XorBasis32","XorBasis64","XorBasis8","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","contains","contains","contains","contains","contains","default","default","default","default","default","from","from","from","from","from","insert","insert","insert","insert","insert","into","into","into","into","into","new","new","new","new","new","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip"],"q":["rithmicrithmic::MoStep","","","rithmic::aug_treap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::aug_treap::finger","","","","rithmic::aug_treap::order_treap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::gameboard","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::graph","","","","","","","","","","","","","","","","","","","","rithmic::graph::dfs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::graph::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::graph::rooted_subtree_fn","","","","","","","","","","","","rithmic::graph::rooted_subtree_fn::RsfStep","","","","","","","","","","rithmic::monoid_ds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::monoid_ds::monoid_ops","","","","","","","","","","","","","","","","","","","","","","","","","rithmic::polynomial","","","","","rithmic::triangular_n","","","rithmic::xor_basis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","A compact boolean (bitset) vector with efficient <code>&lt;&lt;</code> <code>&gt;&gt;</code> …","","","Add a <code>divisors</code> method to <code>::primal::Sieve</code>","","","<code>get_sub</code><code>(index, subtract)</code> indexes position …","Index compress a sequence of length <em>n</em> by mapping every …","This <code>struct</code> is created by <code>IndexCompress::index_compress()</code>. …","","","Inter-process communication via pipes with a spawned child …","","","","","","This <code>enum</code> is created by <code>mo_algorithm()</code>. See its …","","","An <code>Iterator</code> over a mixed-radix numbers","An <code>Iterator</code> over a mixed-radix numbers","","Order a pair (2-<code>tuple</code> or 2-<code>array</code>)","","Mutably borrow two indexes of a <code>slice</code> simultaneously.","Calculate prefix or suffix sums","Enable functional-style printing","","","","","","","","","","","A union-find data structure","Unwrap a <code>Result&lt;T, T&gt;</code>, ignoring the <code>Ok</code>/<code>Err</code> status. …","","","","","","","","","","","Binary search <code>domain</code> for the first point at which <code>predicate</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the current components. See <code>UnionFind</code> for an example","","","","","","","","Find all divisors of <code>n</code>","","","","","","","","","","","","","","Find the representative for <code>x</code>’s component","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Create a new <code>UnionFind</code> from component lists. Roughly the …","","","","","","","","","","","","Incremental maximization","Incremental minimization","","","","","","","","Read from child process until EOF (blocking), then create …","Wait for the next line from the child process, then create …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Merges two <code>Option</code>s by the following logic:","Merges an <code>Option::Some</code> with a 2nd value, or if <code>None</code> simply …","Mo’s Algorithm","","","","","Spawn a child process and set up piped I/O to it. See <code>Ipc</code> …","","","","Construct a new <code>UnionFind</code> with <code>n</code> initially disconnected …","","","","","","","","","","","","","","","","","See <code>PrefixSums</code> for more information","","","","","","","","","Return the current component representatives","","","Return <code>true</code> if <code>x</code> and <code>y</code> are in the same component","","","","","","","","","","","","Return the size of <code>x</code>’s component","","","","See <code>PrefixSums</code> for more information","Ternary search for the maximum point of a function <code>f()</code> in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Connect the components of <code>x</code> and <code>y</code>. Returns <code>true</code> if they …","","","","","","","","","","","Given a set of binary integers, determine if some other …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Gameboard</code> <code>struct</code> represents a rectangular grid of …","Of the squares reachable by “bishop’s move” from …","Set a block at <code>[i, j]</code>. No effect if already blocked","","","","","","Move <code>dist</code> squares in a 45° diagonal line. Blocks along …","Move <code>dist</code> squares in a straight line. Blocks along the way …","Of the four squares orthogonally adjacent to <code>[i, j]</code>, …","Of the eight squares surrounding <code>[i, j]</code> (orthogonally and …","","","Returns the argument unchanged.","Create a new <code>Gameboard</code> from a <code>Vec&lt;Vec&lt;T&gt;&gt;</code>. Any …","","","Check if <code>[i, j]</code> is within the board dimensions. Blocks are …","Calls <code>U::from(self)</code>.","Check if there is currently a block at <code>[i, j]</code>","Of the squares reachable by “knight’s move” from …","Of the squares that are <code>dist</code> Manhattan distance away from …","Create a new <code>Gameboard</code> with <code>h</code> rows and <code>w</code> columns. No …","Of the squares reachable by “queen’s move” from …","Of the squares reachable by “rook’s move” from <code>[i, j]</code>…","","","","","Remove any block at <code>[i, j]</code>. No effect is there is no block …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(Tree) Filter a DFS of the tree to only the <em>n</em> - 1 “upward…","(Tree) Filter a DFS of the tree to only the <em>n</em> - 1 “upward…","","","(Tree) List node visits in a DFS starting at <code>s</code>","(Tree) List node visits in a DFS starting at <code>s</code>","(Tree) List edges traversed in a DFS starting at <code>s</code>","(Tree) List edges traversed in a DFS starting at <code>s</code>","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","<em>O</em>(<em>n</em>)-step calculation of function <code>f()</code> for:","<em>O</em>(<em>n</em>)-step calculation of function <code>f()</code> for:","Run <code>rooted_subtree_fn</code> but stop after the first upward DFS …","Run <code>rooted_subtree_fn</code> but stop after the first upward DFS …","","","","(Tree) Determine the size of all 2(<em>n</em> - 1) possible …","(Tree) Determine the size of all 2(<em>n</em> - 1) possible …","(Tree) Relative to <code>root</code>, determine the number of nodes …","(Tree) Relative to <code>root</code>, determine the number of nodes …","","","","","","","","","See <code>rooted_subtree_fn</code>","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","<em>O(n²)</em>","<em>O(n)</em>","<em>O(n²)</em>","","Note: This runs in <em>O(n²)</em>, so DFT convolution in <em>O(n log n)</em>…","Return the <em>n</em>th triangular number, i.e the sum of <code>1..=n</code>, in …","Return the sum of the integers in <code>range</code>, in <em>O</em>(1)","Return the sum of the integers in <code>range</code>, stepping by <code>step</code>, …","See <code>module-level documentation</code> for more information","See <code>module-level documentation</code> for more information","See <code>module-level documentation</code> for more information","See <code>module-level documentation</code> for more information","See <code>module-level documentation</code> for more information","","","","","","","","","","","Return <code>true</code> if <code>u</code> is <strong>not</strong> independent of the basis","Return <code>true</code> if <code>u</code> is <strong>not</strong> independent of the basis","Return <code>true</code> if <code>u</code> is <strong>not</strong> independent of the basis","Return <code>true</code> if <code>u</code> is <strong>not</strong> independent of the basis","Return <code>true</code> if <code>u</code> is <strong>not</strong> independent of the basis","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If <code>u</code> is independent of the basis, add it and return <code>true</code>","If <code>u</code> is independent of the basis, add it and return <code>true</code>","If <code>u</code> is independent of the basis, add it and return <code>true</code>","If <code>u</code> is independent of the basis, add it and return <code>true</code>","If <code>u</code> is independent of the basis, add it and return <code>true</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[42,41,66,66,0,0,0,0,0,0,0,0,0,0,0,0,67,68,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,66,0,0,0,70,71,72,73,74,0,0,0,0,0,0,0,0,1,1,0,0,0,75,75,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,18,66,13,1,9,10,11,12,18,66,13,1,9,10,11,12,31,31,1,9,10,11,12,1,9,10,11,12,13,13,12,9,1,1,9,1,9,9,76,18,77,77,77,77,1,10,10,13,13,1,10,10,12,1,10,1,1,1,1,9,10,10,12,77,77,18,66,13,1,9,10,11,11,12,1,12,10,10,0,1,10,10,68,68,0,1,10,0,0,13,1,10,10,71,10,10,18,18,72,18,66,13,1,9,10,11,12,10,75,75,75,75,75,10,75,1,75,1,1,0,1,10,1,1,1,11,70,75,75,75,10,10,0,73,73,0,0,0,75,13,18,13,1,10,12,1,1,70,1,0,78,67,13,13,0,0,0,0,0,10,69,10,77,77,77,77,11,1,1,1,12,70,18,12,70,0,1,10,1,1,1,1,1,1,10,12,79,0,69,10,0,1,9,10,11,12,10,0,10,0,0,0,0,18,66,13,1,9,10,11,12,18,66,13,1,9,10,11,12,18,18,66,13,1,9,10,11,12,12,9,74,18,66,13,1,9,10,11,12,0,1,80,81,82,0,0,0,0,0,36,35,37,36,35,37,36,35,36,35,36,35,35,35,83,0,36,36,37,36,35,35,35,37,36,35,37,35,35,35,35,36,36,36,36,36,37,36,35,37,37,0,35,35,35,35,36,36,36,36,35,35,35,35,35,36,35,37,36,35,37,36,35,37,36,35,36,37,36,35,0,84,84,84,42,41,39,0,0,0,0,0,39,42,41,46,40,39,42,41,46,40,39,40,39,40,39,41,39,41,39,42,41,39,40,42,41,46,40,39,42,41,39,39,42,41,42,41,39,41,39,42,42,41,46,40,39,46,42,41,39,42,41,39,42,41,39,46,42,41,39,46,46,41,39,42,42,41,39,41,39,42,41,39,41,39,41,39,41,39,42,42,46,39,39,40,39,41,39,41,39,42,41,46,40,39,42,41,46,40,39,42,41,46,40,39,42,41,46,40,39,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,51,51,0,0,51,51,51,50,51,50,51,50,51,50,51,50,50,51,50,51,50,51,51,50,51,50,50,50,51,50,51,50,51,50,51,50,50,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,52,52,52,52,52,52,52,53,52,52,52,53,52,53,52,52,52,52,52,52,52,53,52,53,52,52,0,52,53,52,53,52,52,53,52,53,52,53,52,52,52,52,52,52,52,85,85,0,85,85,85,85,85,85,85,85,85,86,87,86,88,87,87,87,88,88,86,0,0,55,57,55,57,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,57,55,57,57,55,57,55,57,57,57,55,57,57,0,55,57,55,55,57,57,55,55,55,57,55,57,55,57,55,57,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,57,55,57,56,56,0,0,89,89,89,89,0,56,89,56,56,89,89,89,89,56,89,56,89,56,89,56,89,0,0,0,0,0,0,0,0,0,0,0,0,0,58,59,61,62,64,58,59,61,62,64,58,59,61,62,64,58,59,61,62,64,58,59,61,62,64,58,59,61,62,64,58,59,61,62,64,58,59,61,62,64,58,59,61,62,64,58,59,61,62,64,58,59,61,62,64,58,59,61,62,64],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,2],0,0,[[3,2,4],5],[[],6],[[],6],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,5],[1,1],[[[9,[8]]],[[9,[8]]]],[[[10,[8]]],[[10,[8]]]],[[[11,[8]]],[[11,[8]]]],[12,12],[[]],[[]],[[]],[[]],[[]],[[13,14,14]],[[13,14,14]],[12,[[15,[[15,[14]]]]]],[[[9,[16]]],14],[1,14],[1,14],[[[9,[16]],14]],[[],1],[[],[[9,[17]]]],[9],[14,[[15,[14]]]],[18],[[]],[[]],[[]],[[]],[[1,1],2],[[[10,[19]],10],2],[14,10],[[13,14]],[[13,14]],[[1,2]],[10],[10],[[12,14],14],[1,[[5,[2]]]],[10,5],[1,[[5,[14]]]],[1,[[5,[14]]]],[1],[[1,20],21],[[[9,[22]],20],21],[[10,20],21],[[10,20],21],[[12,20],21],[[],23],[[],23],[[]],[[]],[[]],[[]],[[]],[[]],[15,11],[[]],[[]],[[24,14],1],[[14,24],12],[15,10],[[],10],0,[[1,14],[[5,[2]]]],[10,5],[10,5],[[14,14],5],[[14,14],5],0,[1],[[[10,[25]]]],0,0,[[13,14]],[[1,14]],[[10,14]],[10],[[],9],[10],[[10,14]],[18,26],[18,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,27],0,0,0,0,0,[10,28],0,0,0,[1,29],0,0,[1,[[5,[2]]]],[10,5],[1,[[5,[14]]]],[1,[[5,[14]]]],[1,14],[11,14],[[]],[[]],[6],[6],[[10,10],10],[10,15],0,[[]],[[]],[[14,24],29],0,0,[[]],[[13,14]],[30,18],[14,13],[14,1],[[],10],[14,12],[1],[1],[[]],[14,1],0,[[]],[[14,14]],[[13,14,14]],[[13,14,14]],0,0,0,0,0,[[10,14],10],[[]],[10,10],[[]],[[]],[[]],[[]],[[11,[31,[14]]]],[1,15],[[1,14,2],2],[[1,14,2]],[12,29],[[]],0,[[12,14,14],2],[[],2],0,[[1,14,2]],[10],[[1,14]],[[1,14]],[[1,14]],[[1,14]],[[1,14]],[[1,14]],[10,14],[[12,14],14],[[],14],0,[[]],[10,10],[[[7,[32]]],32],[[]],[[]],[[]],[[]],[[]],[[],23],0,[10,10],0,0,0,0,[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[12,14,14],2],[[[9,[16]]],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[14,1],0,0,0,0,0,0,0,0,0,[[35,36]],[[]],[[]],[[]],[[]],[[]],[[]],[[[36,[8,8,8]]],[[36,[8,8,8]]]],[[[35,[8,8,8,8]]],[[35,[8,8,8,8]]]],[[]],[[]],[35,2],[[],35],[36],0,[[36,4,15],2],[[36,4,15],2],[[]],[[]],[[]],[24,35],[35],[[]],[[]],[[]],[[]],[35,2],[35,37],[[35,38,38],38],[[35,38,38,38],38],0,0,[36,5],[36,5],[36,5],[[]],[[],36],[[],35],[37,5],[37,5],0,[[35,3],37],[35,5],[35,2],[[35,3],2],0,[36,5],[36,5],[36,5],0,[[35,38]],[[35,38]],[[35,38,3]],[[35,38]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],34],[[],34],[[],34],0,[[]],[[]],[[]],0,[[]],[[]],[[],36],0,0,0,0,0,0,0,0,[[[39,[16]],36],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[8,8]]],[[40,[8,8]]]],[[[39,[8,8]]],[[39,[8,8]]]],[[]],[[]],[[[41,[16]]],2],[[[39,[16]]],2],[[[41,[16]]],14],[[[39,[16]]],14],[[],[[42,[16]]]],[[],[[41,[16]]]],[[],[[39,[16]]]],[36,14],[[]],[[]],[[]],[[]],[[]],[24,[[42,[16]]]],[24,[[41,[16]]]],[24,[[39,[16]]]],[[[39,[16]],14]],[[[42,[16]],14]],[[[41,[16]],14]],[[[42,[16]],14,16]],[[[41,[16]],16],14],[[[39,[16]],16],14],[[[41,[16]],16],14],[[[39,[16]],16],14],[[[42,[16]],14,24]],[[]],[[]],[[]],[[]],[[]],[[]],[[[42,[16]]],2],[[[41,[16]]],2],[[[39,[16]]],2],[[[42,[16]]],[[0,[29,43,44,45]]]],[[[41,[16]]],[[0,[29,43,44,45]]]],[[[39,[16]]],[[46,[16]]]],[[[42,[16]]],14],[[[41,[16]]],14],[[[39,[16]]],14],[[]],[[],[[42,[16]]]],[[],[[41,[16]]]],[[],[[39,[16]]]],[46,5],[46,5],[[[41,[16]]],[[5,[14]]]],[[[39,[16]]],[[5,[14]]]],[[[42,[16]],16],14],[[[42,[16]],16],14],[[[41,[16]],[0,[3,8]]],[[0,[29,43,44,45]]]],[[[39,[16]],[0,[3,8]]],[[46,[16]]]],[[[41,[16]],3],14],[[[39,[16]],3],14],[[[42,[16]],[31,[14]]],14],[[[41,[16]]],2],[[[39,[16]]],5],[[[41,[16]]],14],[[[39,[16]]],14],[[[41,[16]],[31,[14]]],14],[[[39,[16]],[31,[14]]],14],[[[41,[16]],3],14],[[[39,[16]],3],14],[[[42,[16]],[31,[14]],16],14],[[[42,[16]],[31,[14]],24],14],[46],[[[39,[16]],[38,[16,14]],14,14]],[[[39,[16]],[38,[16,14]],14]],[[]],[[]],[[[41,[16]]]],[[[39,[16]]]],[[[41,[16]],3]],[[[39,[16]],3]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],34],[[],34],[[],34],[[],34],[[],34],[[]],[[]],[[]],[[]],[[]],0,[47,15],[47],0,[[]],[[]],[47,47],[[]],[[47,48,14],5],[[47,48,14],5],[47,49],[47,49],[[47,47],2],[[47,20],21],[[]],[[[15,[[15,[19]]]],19],47],0,[47],[47,2],[[]],[47,2],[47,49],[[47,14],15],[[14,14],47],[47,15],[47,15],[[]],[[],33],[[],33],[[],34],[47],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[14,14],[[15,[14]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[50,[8]]],[[50,[8]]]],[51,51],[[]],[[]],0,0,[[51,51],2],[[[50,[22]],20],21],[[51,20],21],[[]],[[]],[51],[[]],[[]],0,0,[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],34],[[],34],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[52,14,14]],0,[[52,14,14],[[5,[[15,[14]]]]]],[[]],[[]],[[[52,[8]]],[[52,[8]]]],[[]],[[52,24],[[15,[50]]]],[[53,14],29],[[52,14],29],[[52,14,14],5],[[[52,[2]],14,14],[[5,[14]]]],[[53,14],29],[[52,14],29],[[53,14],29],[[52,14],29],[52,[[10,[5]]]],[[[52,[22]],20],21],[[]],[[14,24],52],[[14,24],52],[[]],0,0,[14,53],[14,52],[14,52],[[14,14],[[15,[14]]]],[52,52],[[53,4],54],[[52,4],54],[[53,4],54],[[52,4],54],[52,14],[14,53],[14,52],[53,[[54,[14]]]],[52,[[54,[14]]]],[[53,14],[[15,[14]]]],[[52,14],[[15,[14]]]],[52,[[15,[[15,[14]]]]]],[[]],[[],33],[[],33],[[],34],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[],33],[[],33],[[],34],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[10,55],[10,55],[10,55],[10,55],[10,55],[10,55],[10,55],[10,55],[10,55],[10,55],[10,55],[10,55],[10,55],[10,55],[10,55],[10,55],[[[55,[[0,[8,17]],[0,[8,[56,[[0,[8,17]],[0,[8,17]]]]]]]]],[[55,[[0,[8,17]],[0,[8,[56,[[0,[8,17]],[0,[8,17]]]]]]]]]],[[[57,[8,8,[0,[8,[56,[8,8]]]]]]],[[57,[8,8,[0,[8,[56,[8,8]]]]]]]],[[]],[[]],[[],[[57,[17,17,[0,[17,[56,[17,17]]]]]]]],[[[55,[56]],20],21],[[[57,[56]],20],21],[[]],[[]],[15,[[57,[56]]]],[24,[[57,[56]]]],[[]],[[]],[[[57,[56]]],14],0,[[],[[55,[56]]]],[14,[[57,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[57,[56]],[31,[14]]]],[[[57,[56]],14]],[[[55,[56]]]],[[[55,[56]]],14],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],34],[[],34],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[55,[56]]]],[[[57,[56]],[31,[14]]]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],34],[[]],[[]],[[]],[[]],[[],5],[[],5],[[]],[[]],[[],15],[[],15],[[]],[[],15],[[],15],[[]],[31],[31],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[58,48],2],[[59,60],2],[[61,6],2],[[62,63],2],[[64,65],2],[[],58],[[],59],[[],61],[[],62],[[],64],[[]],[[]],[[]],[[]],[[]],[[58,48],2],[[59,60],2],[[61,6],2],[[62,63],2],[[64,65],2],[[]],[[]],[[]],[[]],[[]],[[],58],[[],59],[[],61],[[],62],[[],64],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],34],[[],34],[[],34],[[],34],[[],34],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"BVec"],[15,"bool"],[8,"RangeBounds"],[8,"FnMut"],[4,"Option"],[15,"u32"],[3,"Range"],[8,"Clone"],[3,"IndexCompressed"],[3,"NdVec"],[3,"SparseTable"],[3,"UnionFind"],[3,"FactorialTable"],[15,"usize"],[3,"Vec"],[8,"Ord"],[8,"Default"],[3,"Ipc"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"String"],[8,"IntoIterator"],[8,"Hash"],[8,"Source"],[3,"Iter"],[3,"IterMut"],[8,"Iterator"],[3,"Command"],[8,"Rangelike"],[15,"f64"],[4,"Result"],[3,"TypeId"],[3,"AugTreap"],[3,"Node"],[3,"Range"],[6,"OptNode"],[3,"OrderTreap"],[3,"OrderAugFn"],[3,"SortedList"],[3,"List"],[8,"DoubleEndedIterator"],[8,"ExactSizeIterator"],[8,"FusedIterator"],[3,"Range"],[3,"Gameboard"],[15,"u8"],[3,"ArrayVec"],[3,"DfsStep"],[4,"DfsStepKind"],[3,"Graph"],[6,"Tree"],[3,"BTreeMap"],[3,"NdFenwick"],[8,"MonoidOps"],[3,"SegTree"],[3,"XorBasis8"],[3,"XorBasis16"],[15,"u16"],[3,"XorBasis32"],[3,"XorBasis64"],[15,"u64"],[3,"XorBasis128"],[15,"u128"],[4,"MoStep"],[8,"PairMut"],[8,"GetSub"],[8,"PrefixSums"],[8,"Vector2DMore"],[8,"IndexCompress"],[8,"Insort"],[8,"OptionMerge"],[8,"UnwrapAny"],[8,"IntBitOps"],[8,"Divisors"],[8,"PrintMethods"],[8,"OrdPair"],[8,"CountInversions"],[13,"Add"],[13,"Remove"],[13,"Answer"],[8,"AugFn"],[8,"Finger"],[4,"RsfStep"],[13,"Leaf"],[13,"Parent"],[13,"Sibling"],[3,"USumQSum"]]},\
"rithmic_impl":{"doc":"","t":[24,23,23,23,23,14,23],"n":["CmpByKey","autofill","memoize","opaque","semitransparent","struct_input","transparent"],"q":["rithmic_impl","","","","","",""],"d":["","","","","","",""],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
