window.SIDEBAR_ITEMS = {"attr":[["autofill","Create a wrapper macro with the same name as a given function, which automatically fills some of the later arguments with variables of the same name in the calling scope. The result is similar to a closure’s external variable capture but without the disadvantages of closures (e.g. lack of recursion, borrow conflicts)"],["memoize","Memoize a function based on some or all of its arguments"],["opaque","See [`macro@transparent`]"],["semitransparent","See [`macro@transparent`]"],["transparent","Change the hygiene of a declarative macro"]],"derive":[["CmpByKey","Derive [`PartialEq`], [`Eq`], [`PartialOrd`] and [`Ord`] for a struct, but only based on a subset of its fields, marked by `#[key]`"]],"enum":[["MoStep","This `enum` is created by [`mo_algorithm()`]. See its documentation for more"]],"fn":[["binary_search","Binary search `domain` for the first point at which `predicate` returns `true` or `false` matching `search_for`"],["mo_algorithm","Mo’s Algorithm"],["ternary_search","Ternary search for the maximum point of a function `f()` in the given `domain`"]],"macro":[["imax","Incremental maximization"],["imin","Incremental minimization"],["struct_input","Given a `::proconio` input specification and a `Name`, define:"]],"mod":[["aug_treap",""],["gameboard",""],["graph",""],["meld_heap",""],["monoid_ds",""],["polynomial",""],["prelude",""],["triangular_n",""],["xor_basis","Given a set of binary integers, determine if some other integer can be created by the XOR of any subset"]],"struct":[["BVec","A compact boolean (bitset) vector with efficient `<<` `>>` shifting and `|` `^` `&` logical operators"],["FactorialTable",""],["IndexCompressed","This `struct` is created by `IndexCompress::index_compress()`. See its documentation for more"],["Ipc","Inter-process communication via pipes with a spawned child command"],["List",""],["NdFenwick",""],["NdVec",""],["SegTree",""],["SortedList",""],["SparseTable",""],["UnionFind","A union-find data structure"]],"trait":[["CountInversions",""],["Divisors","Add a `divisors` method to `::primal::Sieve`"],["GetSub","`get_sub``(index, subtract)` indexes position `[index - subtract]` of a slice, but handles underflow (returning `None`)"],["IndexCompress","Index compress a sequence of length n by mapping every value to its ordered rank"],["Insort",""],["IntBitOps","This trait provides methods for working with unsigned integers at the bit level"],["OptionMerge",""],["OrdPair","Order a pair (2-[`tuple`] or 2-[`array`])"],["PairMut","Mutably borrow two indexes of a [`slice`] simultaneously."],["PrefixSums","Calculate prefix or suffix sums"],["PrintMethods","Enable functional-style printing"],["Rangelike","This trait is intended to allow function APIs to interchangeably accept integers or any of their [`Range`] variants"],["UnwrapAny","Unwrap a `Result<T, T>`, ignoring the `Ok`/`Err` status"],["Vector2DMore",""]],"type":[["OdometerBE","An `Iterator` over a mixed-radix numbers"],["OdometerLE","An `Iterator` over a mixed-radix numbers"]]};