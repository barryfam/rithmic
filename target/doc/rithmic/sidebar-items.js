initSidebarItems({"enum":[["MoStep","This `enum` is created by [`mo_algorithm()`]. See its documentation for more"]],"fn":[["binary_search","Binary search `domain` for the first point at which `predicate` returns `true` or `false` matching `search_for`"],["mo_algorithm","Moâ€™s Algorithm"],["ternary_search","Ternary search for the maximum point of a function `f()` in the given `domain`"]],"macro":[["imax","Incremental maximization"],["imin","Incremental minimization"]],"mod":[["aug_treap",""],["gameboard",""],["graph",""],["monoid_ds",""],["polynomial",""],["triangular_n",""],["xor_basis","Given a set of binary integers, determine if some other integer can be created by the XOR of any subset. `insert` and `contains` are both O(d) operations, where d is the bit length of the integers"]],"struct":[["BVec","A compact boolean (bitset) vector with efficient `<<` `>>` shifting and `|` `^` `&` logical operators"],["FactorialTable",""],["IndexCompressed","This `struct` is created by `IndexCompress::index_compress()`. See its documentation for more"],["List",""],["MeldHeap","A priority max-queue"],["NdVec",""],["SegTree",""],["SortedList",""],["SparseTable",""],["UnionFind","A union-find data structure"]],"trait":[["CountInversions",""],["Divisors","Add a `divisors` method to `primal::Sieve`"],["IndexCompress","Index compress a sequence of length N by mapping every value to its ordered rank. The compressed sequence is therefore guaranteed to have all its elements be integers less than N"],["Insort",""],["IntBitOps",""],["MonoidOps",""],["OptionMerge",""],["OrdPair","Order a pair (2-`tuple` or 2-`array`)"],["PairMut","Mutably borrow two indexes of a [`slice`] simultaneously."],["PrefixSums","Calculate prefix or suffix sums"],["PrintMethods","Enable functional-style printing"],["Rangelike",""],["UnwrapAny","Unwrap a `Result<T, T>`, ignoring the `Ok`/`Err` status. Primarily for use with [`slice::binary_search`], to use the index regardless of whether the value is found or not"],["Vector2DMore",""]],"type":[["OdometerBE","An `Iterator` over a mixed-radix numbers"],["OdometerLE","An `Iterator` over a mixed-radix numbers"]]});